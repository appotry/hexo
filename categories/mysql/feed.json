{
    "version": "https://jsonfeed.org/version/1",
    "title": "夜法之书 • All posts by \"mysql\" category",
    "description": "~软件驱动世界~个人独立技术博客，关于Linux,开源，Nas，Docker，嵌入式，理财，健身等主题！",
    "home_page_url": "https://blog.17lai.site",
    "items": [
        {
            "id": "https://blog.17lai.site/posts/f0b0af52/",
            "url": "https://blog.17lai.site/posts/f0b0af52/",
            "title": "Mariadb/Mysql命令行常用命令",
            "date_published": "2021-09-08T01:25:00.000Z",
            "content_html": "<h2 id=\"一、初始化等\">一、初始化等</h2>\n<h3 id=\"1、登陆数据库方法\"><strong>1、登陆数据库方法</strong></h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql -u用户名 -p用户密码</code></pre></div></figure>\n<h3 id=\"2、修改root及用户密码\">2、修改root及用户密码</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">use mysql;\nupdate user set password=password('11111111') where user='root' and host='localhost';\nflush privileges;</code></pre></div></figure>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">MariaDB [mysql]&gt; update user set password=password('11111111') where user='root' and host='localhost';\nQuery OK, 1 row affected (0.01 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n \nMariaDB [mysql]&gt; flush privileges;\nQuery OK, 0 rows affected (0.01 sec)\n \nMariaDB [mysql]&gt; exit</code></pre></div></figure>\n<h3 id=\"3、创建用户\"><strong>3、创建用户</strong></h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">insert into mysql.user(host,user,password)values(\"localhost\",\"test\",password(\"password\"));\nflush privileges;</code></pre></div></figure>\n<h3 id=\"4、删除用户\">4、删除用户</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">DELETE FROM user WHERE User=\"test\" and Host=\"localhost\";\nflush privileges;　　</code></pre></div></figure>\n<h3 id=\"5、删除用户的数据库\">5、删除用户的数据库</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">drop database test1;</code></pre></div></figure>\n<h3 id=\"6、交互模式初始化\">6、交互模式初始化</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql_secure_installation</code></pre></div></figure>\n<h2 id=\"二、-常用操作\">二、 常用操作</h2>\n<h3 id=\"1、显示数据库列表\"><strong>1、显示数据库列表</strong></h3>\n<p><code>show databases;</code>:查看所有的数据库</p>\n<h3 id=\"2、创建数据库\">2、创建数据库</h3>\n<p><code>create database zxg;</code>：创建名尾zxg的数据库</p>\n<h3 id=\"3、进入数据库\">3、进入数据库</h3>\n<p><code>use zxg;</code>:进入zxg的数据库</p>\n<h3 id=\"4、显示库中的数据表\">4、显示库中的数据表</h3>\n<p><code>show tables;</code>：查看数据库里有多少张表</p>\n<h3 id=\"5、创建数据表\">5、创建数据表</h3>\n<p><code>create table t1 (id varchar(20),name varchar(20));</code>:创建名为t1表，并创建两两个字段，id、name，varchar表示设置数据长度，用字符来定义长度单位，其</p>\n<h3 id=\"6、插入数据\">6、插入数据</h3>\n<p><code>insert into t1 values（\"1\"，\"zxg\"）;</code>:向表中插入数据</p>\n<h3 id=\"7、查看数据表\">7、查看数据表</h3>\n<p><code>select * from t1;</code> ：查看t1表数据内容</p>\n<h3 id=\"8、多条件查询\">8、多条件查询</h3>\n<p><code>select * from t1 where id=1 and age = 'zxg ' ;</code>: id、age 多个条件查询</p>\n<h3 id=\"9、查看字段内容\">9、查看字段内容</h3>\n<p><code>desc t1;</code>:查看t1 表字段内容</p>\n<h3 id=\"10、修改字段长度\">10、修改字段长度</h3>\n<p><code>alter table t1 modify column name varchar(20);</code>:修改name字段的长度</p>\n<h3 id=\"11、修改该字段内容\">11、修改该字段内容</h3>\n<p><code>update t1 set name='zxg.net' where id=1;</code>：修改name字段的内容</p>\n<h3 id=\"12、权限刷新\"><strong>12、权限刷新</strong></h3>\n<p><code>flush privileges;</code> :刷新权限</p>\n<h3 id=\"13、清空表单\">13、清空表单</h3>\n<p>delete from t1;` :清空表内容</p>\n<h3 id=\"14、删除数据表\">14、删除数据表</h3>\n<p>`drop table t1:删除表</p>\n<h3 id=\"15、删除数据库\">15、删除数据库</h3>\n<p><code>drop database zxg;</code>：删除zxg数据库</p>\n<h3 id=\"16、查看数据库字符集\">16、查看数据库字符集</h3>\n<p><code>show variables like '%char%';</code>:查看数据库字符集</p>\n<h3 id=\"17、查看存储引擎\">17、查看存储引擎</h3>\n<p><code>show engines;</code>:查看MySQL存储引擎。</p>\n<h3 id=\"18、查看默认存储引擎\">18、查看默认存储引擎</h3>\n<p><code>show variables like '%storage_engine%';</code>:查看MySQL默认的存储引擎</p>\n<h3 id=\"19、修改存储引擎\">19、修改存储引擎</h3>\n<p><code>alter table t1 engine=innodb;</code>:修改MySQL t1表存储引擎</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">[root@web2 ~]# mysql\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 2\nServer version: 5.5.60-MariaDB MariaDB Server\n \nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n \nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n \nMariaDB [(none)]&gt; show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| test               |\n+--------------------+\n4 rows in set (0.00 sec)\n \nMariaDB [(none)]&gt;  create database zxg;                 \nQuery OK, 1 row affected (0.00 sec)\n \nMariaDB [(none)]&gt; use zxg;\nDatabase changed\nMariaDB [zxg]&gt; show tables;\nEmpty set (0.00 sec)\n \nMariaDB [zxg]&gt; create table t1(id varchar(20),name varchar(20));\nQuery OK, 0 rows affected (0.00 sec)\n \nMariaDB [zxg]&gt; show tables;\n+---------------+\n| Tables_in_zxg |\n+---------------+\n| t1            |\n+---------------+\n1 row in set (0.00 sec)\n \nMariaDB [zxg]&gt;</code></pre></div></figure>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">MariaDB [zxg]&gt; insert into t1 values (\"1\",\"zxg\");\nQuery OK, 1 row affected (0.01 sec)\n \nMariaDB [zxg]&gt; select *from t1;\n+------+------+\n| id | name |\n+------+------+\n| 1 | zxg |\n+------+------+\n1 row in set (0.00 sec)\n \nMariaDB [zxg]&gt; select *from t1 where id=1;\n+------+------+\n| id | name |\n+------+------+\n| 1 | zxg |\n+------+------+\n1 row in set (0.00 sec)\n \nMariaDB [zxg]&gt; select *from t1 where id=1 and name='zxg';\n+------+------+\n| id | name |\n+------+------+\n| 1 | zxg |\n+------+------+\n1 row in set (0.01 sec)\n \nMariaDB [zxg]&gt; desc t1;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id | varchar(20) | YES | | NULL | |\n| name | varchar(20) | YES | | NULL | |\n+-------+-------------+------+-----+---------+-------+\n2 rows in set (0.00 sec)\n \nMariaDB [zxg]&gt; alter table t1 modify column name varchar(20);\nQuery OK, 0 rows affected (0.00 sec)\nRecords: 0 Duplicates: 0 Warnings: 0\n \nMariaDB [zxg]&gt; update t1 set name='zxg.net' where id=1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1 Changed: 1 Warnings: 0\nMariaDB [zxg]&gt;\n </code></pre></div></figure>\n<h2 id=\"三、mysql-数据库字符集设置\">三、mysql 数据库字符集设置</h2>\n<p>mysql数据库存储数据时，默认编码为latinl，存储中文字符时，在调用时会显示为乱码，为了解决该乱码问题，需修改该mysql默认字符集为UTE-8</p>\n<p>装mariadb的是时候看已经默认为ute-8</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">MariaDB [(none)]&gt; show variables like '%char%';\n+--------------------------+----------------------------+\n| Variable_name            | Value                      |\n+--------------------------+----------------------------+\n| character_set_client     | utf8                       |\n| character_set_connection | utf8                       |\n| character_set_database   | latin1                     |\n| character_set_filesystem | binary                     |\n| character_set_results    | utf8                       |\n| character_set_server     | latin1                     |\n| character_set_system     | utf8                       |\n| character_sets_dir       | /usr/share/mysql/charsets/ |\n+--------------------------+----------------------------+\n8 rows in set (0.00 sec)</code></pre></div></figure>\n<p>如不是，可以设置</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SET character_set_client = utf8;\nSET character_set_results = utf8;\nSET character_set_connection = utf8;</code></pre></div></figure>\n<h2 id=\"四、mysql-数据库密码管理\">四、mysql 数据库密码管理</h2>\n<p>设置密码访问，密码破解、密码权限、修改密码；</p>\n<h3 id=\"1、创建用户及授权\">1、创建用户及授权</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">grant all on zxg.* to test@localhost identified by 'pas';\ngrant select,insert,update,delete on *.*to test@\"%\" identified by 'pas';\ngrant all on zxg.* to test@`192.168.216.53` identified by 'pas'</code></pre></div></figure>\n<h3 id=\"2、破解密码方法\">2、破解密码方法</h3>\n<p>停止服务—》跳过权限方式启动—》单开一个窗口登陆—》登陆修改密码即可</p>\n<p>1）systemctl stop mariadb</p>\n<p>2）mysqld_safe --skip-grant-tables &amp;</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">[root@web2 ~]# mysqld_safe --skip-grant-tables &amp;\n[1] 47542\n[root@web2 ~]# 190520 15:45:22 mysqld_safe Logging to '/var/log/mariadb/mariadb.log'.\n190520 15:45:22 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql</code></pre></div></figure>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">[root@web2 ~]# mysql\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 1\nServer version: 5.5.60-MariaDB MariaDB Server\n \nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n \nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n \nMariaDB [(none)]&gt; use mysql;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n \nDatabase changed\nMariaDB [mysql]&gt; update user set password=password('11111111') where user='root' ;\nQuery OK, 3 rows affected (0.01 sec)\nRows matched: 4  Changed: 3  Warnings: 0\n \nMariaDB [mysql]&gt; flush privileges;\nQuery OK, 0 rows affected (0.00 sec)\n \nMariaDB [mysql]&gt; exit\nBye\n[root@web2 ~]#</code></pre></div></figure>\n<p>然后退出”跳过权限方式“ ctrl+c ，正常启动mysql就可以了</p>\n<h2 id=\"五、mysql-配置文件详解\">五、mysql 配置文件详解</h2>\n<h3 id=\"1、参数说明\">1、参数说明</h3>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">[mysqld]                                                              #服务端配置\nport        = 3306                                                    #监听端口\nsocket      = /tmp/mysql.sock                                         #通信设置\nuser    = mariadb                                                     #使用mariadb用户启动\nbasedir = /usr/local/mariadb                                          #安装路径\ndatadir = /data/mysql                                                 #数据目录\nlog_error = /data/mysql/mariadb.err                             　　　 #错误日志\npid-file = /data/mysql/mariadb.pid                             　　　　#pid进程文件\nskip-external-locking                                                 #避免mysql的外部锁定，减少出错几率提高稳定性\nkey_buffer_size = 64M                                                 #缓存存储引擎参数，这个参数可以设置为64M\nmax_allowed_packet = 1M                                               #允许最大接收数据包的大小，防止服务器发送过大的数据包，可以设置为16MB或者更大，但设置太大也可能有危险\ntable_open_cache = 256                                                #mysql每打开一个表，都会读入一些数据到table_open_cache缓存中，当MYSQL在这个缓存中找不到相应的信息时，才会去磁盘读取，默认值64，假设系统有200个并发连接，则需将此参数设置为200*N（N为每个连接所需的文件描述符数目）；当设置为很大时，如果系统处理不了那么多文件描述符，那么就会出现客户端失效，连接不上\nsort_buffer_size = 1M                                                 #在表进行order by和group by 排序操作时，由于排序的字段没有索引，会出现Using filesort，为了提高性能，可用此参数增加每个线程分配的缓存区大小，默认时256k，这个参数不要设置过大，一般128~256k，另外一般出现using filesort的时候，要通过增加索引来解决\nnet_buffer_length = 8K                                                #包消息缓冲区初始化net_buffer_length字节，但需要时可以增长到max_allowed_packet字节\nread_buffer_size = 1M                                                 #该参数用于表的顺序扫描，表示每个线程分配的缓冲区大小，比如在进行全表扫描时，mysql会按照数据的存储顺序一次读取数据块，每次读取的数据块首先会暂存在read_buffer_size中，当buffer空间被写满或者全部数据读取结束后，在将buffer中的数据返回给上层调用者，以提高效率默认128k，也不要设置过大\nread_rnd_buffer_size = 512K                                           #该参数用于表的随机读取，表示每个线程分配的缓冲区大小，比如，按照一个非索引字段做order by排序操作时，就会利用这个缓冲区来暂存读取的数据，默认时256k，也不要设置过大\nmyisam_sort_buffer_size = 16M                                         #当myisam表执行repair table或创建索引时，用以缓冲排序索引，设置太小可能会遇到\"myisam_sort_buffer_size is to small\"\nthread_cache_size = 32                                                #线程池，线程缓冲。用来缓冲空闲的线程，以至于不被销毁，如果线程缓冲在的空闲线程，需要重新建立新连接，则会优先调用线程池中的缓冲，很快就能相应连接请求，每建立一个连接，都需要一个线程与之匹配。\nquery_cache_size = 32M                                                #缓存select语句和结果集大小的参数。查询缓存会存储一个select查询的文本与被传送到客户端的相应结果。如果之后接收到一个相同的查询，服务器会从查询缓存中检索结果，而不是再次分析和执行这个同样的查询。如果你的环境中写操作很少，读操作频繁，那么打开query_cache_type=1，会对性能有明显提升。如果写操作频繁，则应该关闭它（query_cache_type=0）。\ntmp_table_size = 64M                                                  #临时HEAP数据表的最大长度(默认设置是32M); 超过这个长度的临时数据表将被转换为MyISAM数据表并存入一个临时文件。\n                                                                      #\nexplicit_defaults_for_timestamp = true                     　　　　　　 #是否显示默认时间戳\n#skip-networking                                                      #\nmax_connections = 500                                                 #该参数用来设置最大连接数，告诉你当前你的服务器允许多少并发连接。默认为100，一般设置为512-1000即可。请记住，太多的连接会导致内存的使用量过高并且会锁住你的 MySQL 服务器。一般小网站需要 100-200 的连接数，而较大可能需要 500-800 甚至更多。这里的值很大程度上取决于你 MySQL/MariaDB 的使用情况。\nmax_connect_errors = 100                                              #如果有时网络抽风，或者应用配置错误，或者其他原因导致客户端短时间内不断的尝试连接，客户端可能会被列入黑名单，然后将无法连接，直到再次刷新主机缓存。这个选项默认值太小了，可以考虑设的足够大（如果你的服务器配置够强大的话）。\nopen_files_limit = 65535                                              #mysql打开最大文件数\n                                                                      #\nlog-bin=mysql-bin                                                     #这些路径相对于datadir\nbinlog_format=mixed                                                   #日志格式\nserver-id   = 1                                                       #给服务器分配一个独一无二的ID编号; n的取值范围是1~2的32次方启用二进制日志功能。在复制数据同步的时候会用到，Helloweba后面会有文章介绍。\nexpire_logs_days = 10                                                 #启用二进制日志后，保留日志的天数。服务器会自动清理指定天数前的日志文件，如果不设置则会导致服务器空间耗尽。一般设置为7～14天。\n                                                                       #\ndefault_storage_engine = InnoDB                                     　#新数据表的默认存储引擎(默认设置是MyISAM)。这项设置还可以通过–default-table-type选项来设置。\ninnodb_file_per_table = 1                                             #提供了更灵活的方式，它把每个数据库的信息保存在一个 .ibd 数据文件中。每个 .idb 文件代表它自己的表空间。通过这样的方式可以更快地完成类似 “TRUNCATE” 的数据库操作，当删除或截断一个数据库表时，你也可以回收未使用的空间。这样配置的另一个好处是你可以将某些数据库表放在一个单独的存储设备。这可以大大提升你磁盘的 I/O 负载。\ninnodb_data_home_dir = /data/mysql                             　　　　#InnoDB主目录，所有与InnoDB数据表有关的目录或文件路径都相对于这个路径。在默认的情况下，这个主目录就是MySQL的数据目录。\ninnodb_data_file_path = ibdata1:10M:autoextend     　　　　　　　　　　　#用来容纳InnoDB为数据表的表空间: 可能涉及一个以上的文件; 每一个表空间文件的最大长度都必须以字节(B)、兆字节(MB)或千兆字节(GB)为单位给出; 表空间文件的名字必须以分号隔开; 最后一个表空间文件还可以带一个autoextend属性和一个最大长度(max:n)。\ninnodb_log_group_home_dir = /data/mysql                     　　　　　　#用来存放InnoDB日志文件的目录路径(如ib_logfile0、ib_logfile1等)。在默认的情况下，InnoDB驱动程序将使用 MySQL数据目录作为自己保存日志文件的位置。\ninnodb_buffer_pool_size = 256M                                     　　#这个参数是InnoDB存储引擎的核心参数，默认为128KB，这个参数要设置为物理内存的60%～70%。\ninnodb_log_file_size = 64M                                            #事务日志文件写操作缓存区的最大长度(默认设置是1MB)。\ninnodb_log_buffer_size = 8M                                           #事务日志所使用的缓存区。InnoDB在写事务日志的时候，为了提高性能，先将信息写入Innodb Log Buffer中，当满足innodb_flush_log_trx_commit参数所设置的相应条件（或者日志缓冲区写满）时，再将日志写到文件（或者同步到磁盘）中。可以通过innodb_log_buffer_size参数设置其可以使用的最大内存空间。默认是8MB，一般为16～64MB即可。\ninnodb_flush_log_at_trx_commit = 1                             　　　　#这个选项决定着什么时候把日志信息写入日志文件以及什么时候把这些文件物理地写(术语称为”同步”)到硬盘上。设置值0的意思是每隔一秒写一次日 志并进行 同步，这可以减少硬盘写操作次数，但可能造成数据丢失; 设置值1(设置设置)的意思是在每执行完一条COMMIT命令就写一次日志并进行同步，这可以防止数据丢失，但硬盘写操作可能会很频繁; 设置值2是一般折衷的办法，即每执行完一条COMMIT命令写一次日志，每隔一秒进行一次同步。\ninnodb_lock_wait_timeout = 50                                         #如果某个事务在等待n秒(s)后还没有获得所需要的资源，就使用ROLLBACK命令放弃这个事务。这项设置对于发现和处理未能被InnoDB数据表驱动 程序识别出来的死锁条件有着重要的意义。这个选项的默认设置是50s。\n                                                                      #\n[mysqldump]                                                           #\nquick                                                                 #\nmax_allowed_packet = 16M                                              #          \n                                                                      #\n[mysql]                                                               #\nno-auto-rehash                                                        #\n                                                                      #\n[myisamchk]                                                           #\nkey_buffer_size = 64M                                                 #  \nsort_buffer_size = 1M                                                 #  \nread_buffer = 2M                                                      #\nwrite_buffer = 2M                                                     #\n                                                                      #\n[mysqlhotcopy]                                                        #\ninteractive-timeout                                                   #</code></pre></div></figure>\n<h3 id=\"2、mysql数据库索引案例（百万量级）\">2、mysql数据库索引案例（百万量级）</h3>\n<p>[client]</p>\n<figure><div class=\"code-area\"><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">port    =3306                                  \nsocket    =/tmp/mysql.sock                     \n \n \n \n[mysqld]                                                                             \nport        = 3306                                                         \nsocket      = /tmp/mysql.sock                                   \nuser    = mysql  \nserver_id　　= 10\ndatadir　　= /data/mysql/\nold_passwords　　= 1\nlower_case_table_names　　= 1\ncharacter-set-server　　= utf8\ndefault-storage-engine　　= MYISAM\nlog-bin　　= bin.log\nlog-error　　= error.log\npid-file　　= mysql.pid\nlong_query_time　　= 2\nslow_query_time　　= 2\nslow_query_log　\nslow_query_log_file　　= slow.log\nbinlog_cache_size　　= 4MB\nbinlog_format　　= mixed\nmax_binlog_cache_size　　= 16MB\nmax_binlog_size　　= 1GB\nexpire_logs_days　　= 30\nft_min_word_len　　= 4\nback_log　　= 512\nmax_allowed_packet　　= 64MB\nmax_connections　　= 4096\nmax_connect_errors　　= 100\njoin_buffer_size　　= 2MB\nread_buffer_size　　= 2MB\nread_rnd_buffer_size　　= 2MB\nsort_buffer_size　　　　= 2MB\nquery_cache_size　　= 2MB\ntable_open_cache　　= 10000\nthread_cache_size　　= 256\nmax_heap_table_size　　= 64MB\ntmp_table_size　　= 64MB\nthread_stack　　= 192KB\nthread_concurrency　　= 24\nlocal-infile　　= 0\nskip-show-database\nskip-name-resolve\nskip-external-locking\nconnect_timeout　　= 600\ninteractive_timeout　　= 600\nwait_timeout　　= 600\n#MyISAM\nkey_buffer_size　　= 512MB\nbulk_insert_buffer_size　　= 64MB\nmysiam_sort_buffer_size　　= 64MB\nmysiam_max_sort_file_size　　= 1GB\nmysiam_repair_threads　　= 1\nconcurrent_insert　　= 2\nmyisam_recover\n#INNODB\ninnodb_buffer_pool_size　　= 64G\ninnodb_additional_mem_pool_size　　= 32MB\ninnodb_data_file_path　　=　ibdata1:1G;ibdata2:1G:autoextend\ninnodb_read_io_threads　　= 8\ninnodb_write_io_threads 　　= 8\ninnodb_file_per_table　　= 1\ninnodb_flush_log_at_thx_commit　　= 2\ninnodb_lock_wait_timeout　　= 120\ninnodb_log_buffer_size　　= 8MB\ninnodb_log_file_size　　= 256MB\ninnodb_log_files_in_group　　= 3\ninnodb_max_dirty_pages_pct　　= 90\ninnodb_thread_concurrency　　= 16\ninnodb_open_files　　= 10000\n#innodb_force_recovery　　= 4\n#replication slave\nread-only\n#skip-salve-start\nrelay-log　　= relay.log\nlog-slave-updates</code></pre></div></figure>\n<p>本文参考：</p>\n<p><a href=\"https://www.centos.bz/2018/02/mariadb-mysql%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6my-cnf%E8%A7%A3%E8%AF%BB/\">mariadb-mysql配置文件my-cnf解读</a></p>\n<p><a href=\"http://c.biancheng.net/mysql/\">MySQL教程</a></p>\n<p>《曝光：Linux企业运维实战》</p>\n<p>夜法之书 整理编辑 <strong>From:</strong> <a href=\"https://www.cnblogs.com/zhangxingeng/p/10882845.html\">zhangxingeng</a></p>\n",
            "tags": [
                "linux",
                "mysql",
                "docker",
                "mariadb"
            ]
        },
        {
            "id": "https://blog.17lai.site/posts/d5f56dd0/",
            "url": "https://blog.17lai.site/posts/d5f56dd0/",
            "title": "通过宝塔面板实现MySQL性能简单调优",
            "date_published": "2021-09-06T08:25:00.000Z",
            "content_html": "<blockquote>\n<p>在PHP+MYSQL架构网站运行过程中，往往会遇到各种性能问题影响，如MySQL、PHP、CPU、磁盘IO、缓存等，其中MySQL瓶颈就是最常见也最难解决的一种影响网站性能的因素；通常，我们会使用redis、memcached等缓存软件来缓存内容，这确实是最优的解决方案之一，但这需要网站程序的支持，然而多数常用网站程序并不支持或者不能完美支持这些缓存软件，今天我们就来谈谈如何通过MySQL自身的配置调整来优化MySQL性能，以缓解MySQL瓶颈问题。</p>\n</blockquote>\n<h2 id=\"准备：\"><strong>准备：</strong></h2>\n<blockquote>\n<p>​    1、宝塔Linux面板 正式版 5.2.0+ (2017/09/20发布)  测试版5.2.4+</p>\n<p>​    2、MySQL 5.x</p>\n</blockquote>\n<h3 id=\"通常MySQL调优我们分以下几部分：\"><strong>通常MySQL调优我们分以下几部分：</strong></h3>\n<blockquote>\n<p>​    1、MySQL配置参数调优 (需要根据网站运行情况调整)</p>\n<p>​    2、数据表索引调优 (效果明显，但通常优秀的开源程序都不需要调整)</p>\n<p>​    3、SQL语句调优 (这是程序员或DBA干的事)</p>\n</blockquote>\n<p>今天我们主要谈谈如果配合宝塔面板的新功能来进行MySQL配置参数调优，我们先来看两张图片：</p>\n<p>(图1)</p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/2720210827205902.png\" alt=\"\"></p>\n<p>(图2)</p>\n<p><img src=\"https://cimg1.17lai.site/data/2021/08/2720210827205906.png\" alt=\"\"></p>\n<p>很明显，(图1)显示的是MySQL当前的运行状态，(图2)显示的是MySQL主要配置参数</p>\n<p>下面我们就来解读一下这两张图：</p>\n<h3 id=\"1、活动-峰值连接数\"><strong>1、活动/峰值连接数</strong></h3>\n<p>​      (图1)中当前活动的连接为1个，自MySQL服务启动以来，最高连接数为54；当最高连接数接近或等于(图2)中的max_connections时，应适当增加max_connections，需要注意的是，不要一下子增加过多，建议每次增加50，观察一段时间，不够再继续增加。</p>\n<h3 id=\"2、线程缓存命中率\"><strong>2、线程缓存命中率</strong></h3>\n<p>​      (图1)中线程缓存命中率为99.78%，若这个值小于90%，建议适当增加(图2)中的thread_cache_size，建议每次增加8。</p>\n<h3 id=\"3、索引命中率\"><strong>3、索引命中率</strong></h3>\n<p>​      (图1)中索引命中率为99.50%，若这个值小于95%，建议适当增加(图2)中的key_buffer_size，建议每次增加64，需要说明的是，若您的数据库使用的是Innodb引擎，可忽略这个选项</p>\n<p><strong>4、Innodb索引命中率</strong><br>\n(图1)中Innodb索引命中率为100%，若这个值小于95%，建议适当增加(图2)中的innodb_buffer_pool_size，建议每次增加64，需要说明的是，若您的数据库没有使用Innodb引擎，可忽略这个选项</p>\n<h3 id=\"5、查询缓存命中率\"><strong>5、查询缓存命中率</strong></h3>\n<p>​      MySQL查询缓存是个比较受争议的功能，个人建议当你有在使用redis、memcached等缓存软件时，在(图2)中将query_cache_size设为0可以将其关闭，当你没有使用缓存软件，有多余的内存使用，且数据库瓶颈明显存在时，可以尝试开启查询缓存，这是个非常依赖数据表结构及SQL语句优化的功能，若数据表结构和SQL语句都针对查询缓存进行过优化，它的效果还是很不错的。</p>\n<h3 id=\"6、创建临时表到磁盘\"><strong>6、创建临时表到磁盘</strong></h3>\n<p>​      (图1)中创建临时表到磁盘的比例是0.42%，这说明大部分临时表创建到内存了，不会过多增加磁盘IO的开销，建议，当比例大于2%时适当增加(图1)中的tmp_cache_size，建议每次增加32，当比例大于60%时，放弃吧，有些开源程序并没有专门优化过SQL语句，所以在运行过程中会开启大量临时表，加多少缓存都是不够用的。</p>\n<h3 id=\"7、已打开的表\"><strong>7、已打开的表</strong></h3>\n<p>​      当(图1)中的已打开的表接近或等于(图2)中的table_open_cache时，可以适当增加table_open_cache，但若设置过大可能导致您的程序频繁中断MySQL连接，建议在1024以内，最大不要超过2048。</p>\n<h3 id=\"8、没有使用索引的量、没有使用索引的JOIN量\"><strong>8、没有使用索引的量、没有使用索引的JOIN量</strong></h3>\n<p>​      若不为0，就检查下数据表索引吧，其实只要没有疯涨，比如一天增涨几千，一般可以忽略，必竟优化索引还是程序员或DBA去干比较合适。</p>\n<h3 id=\"9、排序后的合并次数\"><strong>9、排序后的合并次数</strong></h3>\n<p>​      如果这个值在缓慢增张，建议适当增加(图2)中的sort_buffer_size，建议每次增加512，但最大不要超过8192，如果这个值一直在疯涨，增加sort_buffer_size也没用，就放弃这个选项吧，这个锅还是给程序开发者背。</p>\n<h3 id=\"10、锁表次数\"><strong>10、锁表次数</strong></h3>\n<p>​      如果服务器CPU开销不大的情况下，疯狂锁表，建议你将所有数据表转换成innodb，记得转换前备份哦。</p>\n<h3 id=\"11、优化方案\"><strong>11、优化方案</strong></h3>\n<p>​      这个是我们根据内存大小给的一个推荐优化方案，仅是建议仅用于基础参考值，还是要根据实据情况来调整每一个配置项。</p>\n<p>注意：保存参数配置后不会立即生效，记得要重启MySQL服务。</p>\n<p>写在最后：<br>\n因我本人并不是专业DBA，难免有错误或遗漏的地方，还请大家给予指正，另外，可能面板提供的参考数据及调整选项还不够丰富，我们在往后的更新中会根据需要考虑继续增加更多的调整选项，谢谢大家的支持。</p>\n<p>来自网络整理。</p>\n",
            "tags": [
                "linux",
                "mysql",
                "优化"
            ]
        }
    ]
}