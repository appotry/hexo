<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>夜法之书 • Posts by &#34;编译器&#34; category</title>
        <link>https://blog.17lai.site</link>
        <description>~软件驱动世界~个人独立技术博客，关于Linux,开源，Nas，Docker，嵌入式，理财，健身等主题！</description>
        <language>zh-CN</language>
        <pubDate>Wed, 27 Jul 2022 11:34:11 +0800</pubDate>
        <lastBuildDate>Wed, 27 Jul 2022 11:34:11 +0800</lastBuildDate>
        <category>github</category>
        <category>jekyll</category>
        <category>blog</category>
        <category>gitlab</category>
        <category>git</category>
        <category>crack</category>
        <category>embeded</category>
        <category>hisilicon</category>
        <category>linux</category>
        <category>driver</category>
        <category>3798m</category>
        <category>mpp</category>
        <category>unf</category>
        <category>kernel</category>
        <category>hardlink</category>
        <category>bt</category>
        <category>pt</category>
        <category>qnap</category>
        <category>硬盘</category>
        <category>nas</category>
        <category>markdown</category>
        <category>picgo</category>
        <category>wiz</category>
        <category>joplin</category>
        <category>typora</category>
        <category>3G</category>
        <category>4G</category>
        <category>3531a</category>
        <category>移植</category>
        <category>嵌入式</category>
        <category>宝塔</category>
        <category>vps</category>
        <category>建站</category>
        <category>nginx</category>
        <category>apache</category>
        <category>mysql</category>
        <category>docker</category>
        <category>lamp</category>
        <category>php</category>
        <category>tomcat</category>
        <category>registry</category>
        <category>教程</category>
        <category>email</category>
        <category>https</category>
        <category>ssl</category>
        <category>debian</category>
        <category>laptop</category>
        <category>ed2k</category>
        <category>ati</category>
        <category>qbittorrent</category>
        <category>ssd</category>
        <category>hdd</category>
        <category>pdca</category>
        <category>5w2h</category>
        <category>smart</category>
        <category>swot</category>
        <category>grow</category>
        <category>okr</category>
        <category>wbs</category>
        <category>transmission</category>
        <category>启动</category>
        <category>tls</category>
        <category>隐私</category>
        <category>安全</category>
        <category>优化</category>
        <category>gitbook</category>
        <category>emby</category>
        <category>sonarr</category>
        <category>jeckett</category>
        <category>portainer</category>
        <category>note</category>
        <category>mariadb</category>
        <category>webdav</category>
        <category>hexo</category>
        <category>matery</category>
        <category>npm</category>
        <category>web</category>
        <category>http</category>
        <category>css</category>
        <category>js</category>
        <category>ai</category>
        <category>face</category>
        <category>3a</category>
        <category>ae</category>
        <category>image</category>
        <category>ccs</category>
        <category>vim</category>
        <category>ide</category>
        <category>music</category>
        <category>韩红</category>
        <category>thinkpad</category>
        <category>sound</category>
        <category>speaker</category>
        <category>刮削</category>
        <category>musicbrainz</category>
        <category>mp3tag</category>
        <category>tmm</category>
        <category>字幕</category>
        <category>plex</category>
        <category>cmake</category>
        <category>develop</category>
        <category>ipv6</category>
        <category>traefik</category>
        <category>proxy</category>
        <category>swarm</category>
        <category>ubuntu</category>
        <category>vscode</category>
        <category>插件</category>
        <category>编码</category>
        <category>mermaid</category>
        <category>ci/cd</category>
        <category>earthly</category>
        <category>mstream</category>
        <category>selfhost</category>
        <category>plantuml</category>
        <category>mathjax</category>
        <category>中岛美嘉</category>
        <category>node</category>
        <category>jenkins</category>
        <category>tools</category>
        <category>winrar</category>
        <category>emoji</category>
        <category>shell</category>
        <category>isp</category>
        <category>awb</category>
        <category>mywork</category>
        <category>cdn</category>
        <category>seo</category>
        <category>devops</category>
        <category>k8s</category>
        <category>harbor</category>
        <category>pmbok</category>
        <category>管理</category>
        <category>ipd</category>
        <category>绩效</category>
        <category>drowio</category>
        <category>man</category>
        <category>框架</category>
        <category>图解</category>
        <category>doxygen</category>
        <category>bash</category>
        <category>中医</category>
        <category>西医</category>
        <category>文化历史</category>
        <category>竞品分析</category>
        <category>rss</category>
        <category>rsshub</category>
        <category>社会观察</category>
        <category>知识</category>
        <category>智慧</category>
        <category>os</category>
        <category>自制</category>
        <category>fitness</category>
        <category>健身</category>
        <category>运动</category>
        <category>驱动</category>
        <category>sensor</category>
        <category>编译器</category>
        <category>C</category>
        <category>compiler</category>
        <category>nodeppt</category>
        <category>故事</category>
        <category>echarts</category>
        <category>vercel</category>
        <category>potplayer</category>
        <category>action</category>
        <category>workflow</category>
        <category>概率</category>
        <category>普朗克</category>
        <category>写作</category>
        <category>yandex</category>
        <category>source</category>
        <category>hack</category>
        <category>download</category>
        <category>chatgpt</category>
        <category>openai</category>
        <category>投资</category>
        <category>理财</category>
        <category>金融</category>
        <category>不可能三角</category>
        <category>calibre</category>
        <category>douban</category>
        <category>book</category>
        <category>waline</category>
        <category>IPD</category>
        <category>MM方法论</category>
        <category>端到端</category>
        <category>信用卡</category>
        <category>定制服务器</category>
        <category>search</category>
        <category>读书评鉴</category>
        <category>穿越必备</category>
        <category>易学</category>
        <category>高考</category>
        <category>专业</category>
        <category>开源</category>
        <category>google</category>
        <category>人性</category>
        <category>人格分析</category>
        <category>profile</category>
        <category>tampermonkey</category>
        <category>zhihu</category>
        <category>csdn</category>
        <category>juejin</category>
        <category>webhook</category>
        <category>密码</category>
        <category>bitwarden</category>
        <category>office</category>
        <category>kms</category>
        <category>破解</category>
        <category>健康</category>
        <category>恢复</category>
        <category>养生</category>
        <category>刀郎</category>
        <category>study</category>
        <category>english</category>
        <category>雅思</category>
        <category>umami</category>
        <category>windows</category>
        <category>垃圾清理</category>
        <category>速度优化</category>
        <category>阳历</category>
        <category>阴历</category>
        <category>阴阳和历</category>
        <category>天干</category>
        <category>地支</category>
        <category>热水器</category>
        <category>维护</category>
        <category>汽车</category>
        <category>测速</category>
        <category>nat</category>
        <category>光猫</category>
        <category>ipfs</category>
        <category>zlibrary</category>
        <item>
            <guid isPermalink="true">https://blog.17lai.site/posts/32570315/</guid>
            <title>手把手教你构建 C 语言编译器</title>
            <link>https://blog.17lai.site/posts/32570315/</link>
            <category>自制</category>
            <category>编译器</category>
            <category>C</category>
            <category>compiler</category>
            <pubDate>Wed, 27 Jul 2022 11:34:11 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;“手把手教你构建 C 语言编译器” 这一系列教程将带你从头编写一个 C 语言的编译器。希望通过这个系列，我们能对编译器的构建有一定的了解，同时，我们也将构建出一个能用的 C 语言编译器，尽管有许多语法并不支持。&lt;/p&gt;
&lt;p&gt;手把手教你构建 C 语言编译器系列共有10个部分：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&#34;https://cimg1.17lai.site/data/2022/07/27/20220727122146.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在开始进入正题之前，本篇是一些闲聊，谈谈这个系列的初衷。如果你急切地想进入正篇，请跳过本章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;为什么要学编译原理&#34;&gt;为什么要学编译原理&lt;/h3&gt;
&lt;p&gt;如果要我说计算机专业最重要的三门课，我会说是《数据结构》、《算法》和《编译原理》。在我看来，能不能理解“递归”像是程序员的第一道门槛，而会不会写编译器则是第二道。&lt;/p&gt;
&lt;p&gt;（当然，并不是说是没写过编译器就不是好程序员，只能说它是一个相当大的挑战吧）&lt;/p&gt;
&lt;p&gt;以前人们会说，学习了编译原理，你就能写出更加高效的代码，但随着计算机性能的提升，代码是否高效显得就不那么重要了。那么为什么要学习编译原理呢？&lt;/p&gt;
&lt;p&gt;原因只有一个：装B。&lt;/p&gt;
&lt;p&gt;好吧，也许现在还想学习编译原理的人只可能是因为兴趣了。一方面想了解它的工作原理；另一方面希望挑战一下自己，看看自己能走多远。&lt;/p&gt;
&lt;h3 id=&#34;理论很复杂，实现也很复杂？&#34;&gt;理论很复杂，实现也很复杂？&lt;/h3&gt;
&lt;p&gt;我对编译器一直心存敬佩。所以当学校开《编译原理》的课程后，我是抱着满腔热情去上课的，但是两节课后我就放弃了。原因是太复杂了，听不懂。&lt;/p&gt;
&lt;p&gt;一般编译原理的课程会说一些：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何表示语法（BNF什么的）&lt;/li&gt;
&lt;li&gt;词法分析，用什么有穷自动机和无穷自动机&lt;/li&gt;
&lt;li&gt;语法分析，递归下降法，什么 &lt;code&gt;LL(k)&lt;/code&gt;，LALR 分析。&lt;/li&gt;
&lt;li&gt;中间代码的表示&lt;/li&gt;
&lt;li&gt;代码的生成&lt;/li&gt;
&lt;li&gt;代码优化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我相信绝大多数（98％）的学生顶多学到语法分析就结束了。并且最重要的是，学了这么多也没用！依旧帮助不了我们学习编译器！这其中最主要的原因是《编译原理》试图教会我们的是如何构造“编译器生成器”，即构造一个工具，根据文法来生成编译器（如 lex/yacc）等等。&lt;/p&gt;
&lt;p&gt;这些理论试图教会我们如何用通用的方法来自动解决问题，它们有很强的实际意义，只是对于一般的学生或程序员来说，它们过于强大，内容过于复杂。如果你尝试阅读 lex/yacc （或 flex/bison）的代码，就会发现太可怕了。&lt;/p&gt;
&lt;p&gt;然而如果你能跟我一样，真正来实现一个简单的编译器，那么你会发现，比起可怕的《编译原理》，这点复杂度还是不算什么的（因为好多理论根本用不上）。&lt;/p&gt;
&lt;h3 id=&#34;项目的初衷&#34;&gt;项目的初衷&lt;/h3&gt;
&lt;p&gt;有一次在 Github 上看到了一个项目（当时很火的），名叫 &lt;a href=&#34;https://github.com/rswier/c4&#34;&gt;c4&lt;/a&gt;，号称用 4 个函数来实现了一个小的 C 语言编译器。它最让我震惊的是能够自举，即能自己编译自己。并且它用很少的代码就完成了一个功能相当完善的 C 语言编译器。&lt;/p&gt;
&lt;p&gt;一般的编译器相关的教程要么就十分简单（如实现四则运算），要么就是借助了自动生成的工具（如 flex/bison）。而 c4 的代码完全是手工实现的，不用外部工具。可惜的是它的代码初衷是代码最小化，所以写得很乱，很难懂。所以本项目的主要目的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实现一个功能完善的 C 语言编译器&lt;/li&gt;
&lt;li&gt;通过教程来说明这个过程。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;c4 大致500+行。重写的代码历时一周，总共代码加注释1400行。项目地址: &lt;a href=&#34;https://github.com/lotabout/write-a-C-interpreter&#34;&gt;Write a C Interpreter&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;声明：本项目中的代码逻辑绝大多数取自 c4 ，但确为自己重写。&lt;/p&gt;
&lt;h3 id=&#34;做好心理准备&#34;&gt;做好心理准备&lt;/h3&gt;
&lt;p&gt;在写编译器的时候会遇到两个主要问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;繁琐，会有许多相似的代码，写起来很无聊。&lt;/li&gt;
&lt;li&gt;难以调试，一方面没有很好的测试用例，另一方面需要对照生成的代码来调试（遇到的时候就知道了）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以我希望你有足够的耐心和时间来学习，相信当你真正完成的时候会像我一样，十分有成就感。&lt;/p&gt;
&lt;p&gt;PS. 第一篇完全没有正题相关的内容也是希望你能有所心理准备再开始学习。&lt;/p&gt;
&lt;h3 id=&#34;参考资料&#34;&gt;参考资料&lt;/h3&gt;
&lt;p&gt;最后想介绍几个资料：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://compilers.iecc.com/crenshaw/&#34;&gt;Let’s Build a Compiler&lt;/a&gt; 很好的初学者教程，英文的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hwaci.com/sw/lemon/&#34;&gt;Lemon Parser Generator&lt;/a&gt;，一个语法分析器生成器，对照《编译原理》观看效果更佳。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;设计&#34;&gt;设计&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;从整体上讲解如何设计我们的 C 语言编译器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先要说明的是，虽然标题是编译器，但实际上我们构建的是 C 语言的解释器，这意味着我们可以像运行脚本一样去运行 C 语言的源代码文件。这么做的理由有两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解释器与编译器仅在代码生成阶段有区别，而其它方面如词法分析、语法分析是一样的。&lt;/li&gt;
&lt;li&gt;解释器需要我们实现自己的虚拟机与指令集，而这部分能帮助我们了解计算机的工作原理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;编译器的构建流程&#34;&gt;编译器的构建流程&lt;/h3&gt;
&lt;p&gt;一般而言，编译器的编写分为 3 个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;词法分析器，用于将字符串转化成内部的表示结构。&lt;/li&gt;
&lt;li&gt;语法分析器，将词法分析得到的标记流（token）生成一棵语法树。&lt;/li&gt;
&lt;li&gt;目标代码的生成，将语法树转化成目标代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;已经有许多工具能帮助我们处理阶段1和2，如 flex 用于词法分析，bison 用于语法分析。只是它们的功能都过于强大，屏蔽了许多实现上的细节，对于学习构建编译器帮助不大。所以我们要完全手写这些功能。&lt;/p&gt;
&lt;p&gt;所以我们会依照以下步骤来构建我们的编译器：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建我们自己的虚拟机以及指令集。这后生成的目标代码便是我们的指令集。&lt;/li&gt;
&lt;li&gt;构建我们的词法分析器&lt;/li&gt;
&lt;li&gt;构建语法分析器&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;编译器框架&#34;&gt;编译器框架&lt;/h3&gt;
&lt;p&gt;我们的编译器主要包括 4 个函数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;next()&lt;/code&gt; 用于词法分析，获取下一个标记，它将自动忽略空白字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;program()&lt;/code&gt; 语法分析的入口，分析整个 C 语言程序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expression(level)&lt;/code&gt; 用于解析一个表达式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval()&lt;/code&gt; 虚拟机的入口，用于解释目标代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里有一个单独用于解析“表达式”的函数 &lt;code&gt;expression&lt;/code&gt; 是因为表达式在语法分析中相对独立并且比较复杂，所以我们将它单独作为一个模块（函数）。下面是相应的源代码：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;memory.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int token;            // current token
char *src, *old_src;  // pointer to source code string;
int poolsize;         // default size of text/data/stack
int line;             // line number

void next() {
    token = *src++;
    return;
}

void expression(int level) {
    // do nothing
}

void program() {
    next();                  // get next token
    while (token &amp;gt; 0) {
        printf(&#34;token is: %c\n&#34;, token);
        next();
    }
}


int eval() { // do nothing yet
    return 0;
}

int main(int argc, char **argv)
{
    int i, fd;

    argc--;
    argv++;

    poolsize = 256 * 1024; // arbitrary size
    line = 1;

    if ((fd = open(*argv, 0)) &amp;lt; 0) {
        printf(&#34;could not open(%s)\n&#34;, *argv);
        return -1;
    }

    if (!(src = old_src = malloc(poolsize))) {
        printf(&#34;could not malloc(%d) for source area\n&#34;, poolsize);
        return -1;
    }

    // read the source file
    if ((i = read(fd, src, poolsize-1)) &amp;lt;= 0) {
        printf(&#34;read() returned %d\n&#34;, i);
        return -1;
    }
    src[i] = 0; // add EOF character
    close(fd);

    program();
    return eval();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码看上去挺复杂，但其实内容不多。它的流程为：读取一个文件（内容为 C 语言代码），逐个读取文件中的字符，并输出。这里需要的是注意每个函数的作用，后面的文章中，我们将逐个填充每个函数的功能，最终构建起我们的编译器。&lt;/p&gt;
&lt;p&gt;本节的代码可以在 &lt;a href=&#34;https://github.com/lotabout/write-a-C-interpreter/tree/step-0&#34;&gt;Github&lt;/a&gt; 上下载，也可以直接 clone&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone -b step-0 https://github.com/lotabout/write-a-C-interpreter&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;这样我们就有了一个最简单的编译器：什么都不干的编译器，下一章中，我们将实现其中的&lt;code&gt;eval&lt;/code&gt;函数，即我们自己的虚拟机。&lt;/p&gt;
&lt;h2 id=&#34;虚拟机&#34;&gt;虚拟机&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本章我们要构建一台虚拟的电脑，设计我们自己的指令集，运行我们的指令集，说得通俗一点就是自己实现一套汇编语言。它们将作为我们的编译器最终输出的目标代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;计算机的内部工作原理&#34;&gt;计算机的内部工作原理&lt;/h3&gt;
&lt;p&gt;计算机中有三个基本部件需要我们关注：CPU、寄存器及内存。代码（汇编指令）以二进制的形式保存在内存中；CPU 从中一条条地加载指令执行；程序运行的状态保存在寄存器中。&lt;/p&gt;
&lt;h4 id=&#34;内存&#34;&gt;内存&lt;/h4&gt;
&lt;p&gt;内存用于存储数据，这里的数据可以是代码，也可以是其它的数据。现代操作系统在操作内存时，并不是直接处理”物理内存“，而是操作”虚拟内存“。虚拟内存可以理解为一种映射，它的作用是屏蔽了物理的细节。例如 32 位的机器中，我们可以使用的内存地址为 &lt;code&gt;2^32 = 4G&lt;/code&gt;，而电脑上的实际内存可能只有 &lt;code&gt;256 M&lt;/code&gt;。操作系统将我们使用的虚拟地址映射到了到实际的内存上。&lt;/p&gt;
&lt;p&gt;当然，我们这里并不需要了解太多，但需要了解的是：进程的内存会被分成几个段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码段（text）用于存放代码（指令）。&lt;/li&gt;
&lt;li&gt;数据段（data）用于存放初始化了的数据，如&lt;code&gt;int i = 10;&lt;/code&gt;，就需要存放到数据段中。&lt;/li&gt;
&lt;li&gt;未初始化数据段（bss）用于存放未初始化的数据，如 &lt;code&gt;int i[1000];&lt;/code&gt;，因为不关心其中的真正数值，所以单独存放可以节省空间，减少程序的体积。&lt;/li&gt;
&lt;li&gt;栈（stack）用于处理函数调用相关的数据，如调用帧（calling frame）或是函数的局部变量等。&lt;/li&gt;
&lt;li&gt;堆（heap）用于为程序动态分配内存。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;它们在内存中的位置类似于下图：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;+------------------+
|    stack   |     |      high address
|    ...     v     |
|                  |
|                  |
|                  |
|                  |
|    ...     ^     |
|    heap    |     |
+------------------+
| bss  segment     |
+------------------+
| data segment     |
+------------------+
| text segment     |      low address
+------------------+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;我们的虚拟机并不打算模拟完整的计算机，因此简单起见，我们只关心三个内容：代码段、数据段以及栈。其中的数据段我们只用来存放字符串，因为我们的编译器并不支持初始化变量，因此我们也不需要未初始化数据段。&lt;/p&gt;
&lt;p&gt;当用户的程序需要分配内存时，理论上我们的虚拟机需要维护一个堆用于内存分配，但实际实现上较为复杂且与编译无关，故我们引入一个指令&lt;code&gt;MSET&lt;/code&gt;，使我们能直接使用编译器（解释器）中的内存。&lt;/p&gt;
&lt;p&gt;综上，我们需要首先在全局添加如下代码：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;int *text,            // text segment
    *old_text,        // for dump text segment
    *stack;           // stack
char *data;           // data segment&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;注意这里的类型，虽然是&lt;code&gt;int&lt;/code&gt;型，但理解起来应该作为无符号的整型，因为我们会在代码段（text）中存放如指针/内存地址的数据，它们就是无符号的。其中数据段（data）由于只存放字符串，所以是 &lt;code&gt;char *&lt;/code&gt; 型的。&lt;/p&gt;
&lt;p&gt;接着，在&lt;code&gt;main&lt;/code&gt;函数中加入初始化代码，真正为其分配内存：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;int main() {
    close(fd);
    ...

    // allocate memory for virtual machine
    if (!(text = old_text = malloc(poolsize))) {
        printf(&#34;could not malloc(%d) for text area\n&#34;, poolsize);
        return -1;
    }
    if (!(data = malloc(poolsize))) {
        printf(&#34;could not malloc(%d) for data area\n&#34;, poolsize);
        return -1;
    }
    if (!(stack = malloc(poolsize))) {
        printf(&#34;could not malloc(%d) for stack area\n&#34;, poolsize);
        return -1;
    }

    memset(text, 0, poolsize);
    memset(data, 0, poolsize);
    memset(stack, 0, poolsize);

    ...
    program();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;寄存器&#34;&gt;寄存器&lt;/h4&gt;
&lt;p&gt;计算机中的寄存器用于存放计算机的运行状态，真正的计算机中有许多不同种类的寄存器，但我们的虚拟机中只使用 4 个寄存器，分别如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;PC&lt;/code&gt; 程序计数器，它存放的是一个内存地址，该地址中存放着 &lt;strong&gt;下一条&lt;/strong&gt; 要执行的计算机指令。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SP&lt;/code&gt; 指针寄存器，永远指向当前的栈顶。注意的是由于栈是位于高地址并向低地址增长的，所以入栈时 &lt;code&gt;SP&lt;/code&gt; 的值减小。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BP&lt;/code&gt; 基址指针。也是用于指向栈的某些位置，在调用函数时会使用到它。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AX&lt;/code&gt; 通用寄存器，我们的虚拟机中，它用于存放一条指令执行后的结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要理解这些寄存器的作用，需要去理解程序运行中会有哪些状态。而这些寄存器只是用于保存这些状态的。&lt;/p&gt;
&lt;p&gt;在全局中加入如下定义：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;int *pc, *bp, *sp, ax, cycle; // virtual machine registers&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;main&lt;/code&gt; 函数中加入初始化代码，注意的是&lt;code&gt;PC&lt;/code&gt;在初始应指向目标代码中的&lt;code&gt;main&lt;/code&gt;函数，但我们还没有写任何编译相关的代码，因此先不处理。代码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;memset(stack, 0, poolsize);
...

bp = sp = (int *)((int)stack + poolsize);
ax = 0;

...
program();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;与 CPU 相关的是指令集，我们将专门作为一个小节。&lt;/p&gt;
&lt;h3 id=&#34;指令集&#34;&gt;指令集&lt;/h3&gt;
&lt;p&gt;指令集是 CPU 能识别的命令的集合，也可以说是 CPU 能理解的语言。这里我们要为我们的虚拟机构建自己的指令集。它们基于 x86 的指令集，但更为简单。&lt;/p&gt;
&lt;p&gt;首先在全局变量中加入一个枚举类型，这是我们要支持的全部指令：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;// instructions
enum { LEA ,IMM ,JMP ,CALL,JZ  ,JNZ ,ENT ,ADJ ,LEV ,LI  ,LC  ,SI  ,SC  ,PUSH,
       OR  ,XOR ,AND ,EQ  ,NE  ,LT  ,GT  ,LE  ,GE  ,SHL ,SHR ,ADD ,SUB ,MUL ,DIV ,MOD ,
       OPEN,READ,CLOS,PRTF,MALC,MSET,MCMP,EXIT };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;这些指令的顺序安排是有意的，稍后你会看到，带有参数的指令在前，没有参数的指令在后。这种顺序的唯一作用就是在打印调试信息时更加方便。但我们讲解的顺序并不依据它。&lt;/p&gt;
&lt;h4 id=&#34;MOV&#34;&gt;MOV&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;MOV&lt;/code&gt; 是所有指令中最基础的一个，它用于将数据放进寄存器或内存地址，有点类似于 C 语言中的赋值语句。x86 的 &lt;code&gt;MOV&lt;/code&gt; 指令有两个参数，分别是源地址和目标地址：&lt;code&gt;MOV dest, source&lt;/code&gt; （Intel 风格），表示将 &lt;code&gt;source&lt;/code&gt; 的内容放在 &lt;code&gt;dest&lt;/code&gt; 中，它们可以是一个数、寄存器或是一个内存地址。&lt;/p&gt;
&lt;p&gt;一方面，我们的虚拟机只有一个寄存器，另一方面，识别这些参数的类型（是数据还是地址）是比较困难的，因此我们将 &lt;code&gt;MOV&lt;/code&gt; 指令拆分成 5 个指令，这些指令只接受一个参数，如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;IMM &amp;lt;num&amp;gt;&lt;/code&gt; 将 &lt;code&gt;&amp;lt;num&amp;gt;&lt;/code&gt; 放入寄存器 &lt;code&gt;ax&lt;/code&gt; 中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LC&lt;/code&gt; 将对应地址中的字符载入 &lt;code&gt;ax&lt;/code&gt; 中，要求 &lt;code&gt;ax&lt;/code&gt; 中存放地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LI&lt;/code&gt; 将对应地址中的整数载入 &lt;code&gt;ax&lt;/code&gt; 中，要求 &lt;code&gt;ax&lt;/code&gt; 中存放地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SC&lt;/code&gt; 将 &lt;code&gt;ax&lt;/code&gt; 中的数据作为字符存放入地址中，要求栈顶存放地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SI&lt;/code&gt; 将 &lt;code&gt;ax&lt;/code&gt; 中的数据作为整数存放入地址中，要求栈顶存放地址。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你可能会觉得将一个指令变成了许多指令，整个系统就变得复杂了，但实际情况并非如此。首先是 x86 的 &lt;code&gt;MOV&lt;/code&gt; 指令其实有许多变种，根据类型的不同有 &lt;code&gt;MOVB&lt;/code&gt;, &lt;code&gt;MOVW&lt;/code&gt; 等指令，我们这里的 &lt;code&gt;LC/SC&lt;/code&gt; 和 &lt;code&gt;LI/SI&lt;/code&gt; 就是对应字符型和整型的存取操作。&lt;/p&gt;
&lt;p&gt;但最为重要的是，通过将 &lt;code&gt;MOV&lt;/code&gt; 指令拆分成这些指令，只有 &lt;code&gt;IMM&lt;/code&gt; 需要有参数，且不需要判断类型，所以大大简化了实现的难度。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;eval()&lt;/code&gt; 函数中加入下列代码：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;void eval() {
    int op, *tmp;
    while (1) {
        if (op == IMM)       {ax = *pc++;}                                     // load immediate value to ax
        else if (op == LC)   {ax = *(char *)ax;}                               // load character to ax, address in ax
        else if (op == LI)   {ax = *(int *)ax;}                                // load integer to ax, address in ax
        else if (op == SC)   {ax = *(char *)*sp++ = ax;}                       // save character to address, value in ax, address on stack
        else if (op == SI)   {*(int *)*sp++ = ax;}                             // save integer to address, value in ax, address on stack
    }

    ...
    return 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;其中的 &lt;code&gt;*sp++&lt;/code&gt; 的作用是退栈，相当于 &lt;code&gt;POP&lt;/code&gt; 操作。&lt;/p&gt;
&lt;p&gt;这里要解释的一点是，为什么 &lt;code&gt;SI/SC&lt;/code&gt; 指令中，地址存放在栈中，而 &lt;code&gt;LI/LC&lt;/code&gt; 中，地址存放在 &lt;code&gt;ax&lt;/code&gt; 中？原因是默认计算的结果是存放在 &lt;code&gt;ax&lt;/code&gt; 中的，而地址通常是需要通过计算获得，所以执行 &lt;code&gt;LI/LC&lt;/code&gt; 时直接从 &lt;code&gt;ax&lt;/code&gt; 取值会更高效。另一点是我们的 &lt;code&gt;PUSH&lt;/code&gt; 指令只能将 &lt;code&gt;ax&lt;/code&gt; 的值放到栈上，而不能以值作为参数，详细见下文。&lt;/p&gt;
&lt;h4 id=&#34;PUSH&#34;&gt;PUSH&lt;/h4&gt;
&lt;p&gt;在 x86 中，&lt;code&gt;PUSH&lt;/code&gt; 的作用是将值或寄存器，而在我们的虚拟机中，它的作用是将 &lt;code&gt;ax&lt;/code&gt; 的值放入栈中。这样做的主要原因是为了简化虚拟机的实现，并且我们也只有一个寄存器 &lt;code&gt;ax&lt;/code&gt; 。代码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (op == PUSH) {*--sp = ax;}                                     // push the value of ax onto the stack&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;JMP&#34;&gt;JMP&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;JMP &amp;lt;addr&amp;gt;&lt;/code&gt; 是跳转指令，无条件地将当前的 &lt;code&gt;PC&lt;/code&gt; 寄存器设置为指定的 &lt;code&gt;&amp;lt;addr&amp;gt;&lt;/code&gt;，实现如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (op == JMP)  {pc = (int *)*pc;}                                // jump to the address&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是，&lt;code&gt;pc&lt;/code&gt; 寄存器指向的是 &lt;strong&gt;下一条&lt;/strong&gt; 指令。所以此时它存放的是 &lt;code&gt;JMP&lt;/code&gt; 指令的参数，即 &lt;code&gt;&amp;lt;addr&amp;gt;&lt;/code&gt; 的值。&lt;/p&gt;
&lt;h4 id=&#34;JZ-JNZ&#34;&gt;JZ/JNZ&lt;/h4&gt;
&lt;p&gt;为了实现 &lt;code&gt;if&lt;/code&gt; 语句，我们需要条件判断相关的指令。这里我们只实现两个最简单的条件判断，即结果（&lt;code&gt;ax&lt;/code&gt;）为零或不为零情况下的跳转。&lt;/p&gt;
&lt;p&gt;实现如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (op == JZ)   {pc = ax ? pc + 1 : (int *)*pc;}                   // jump if ax is zero
else if (op == JNZ)  {pc = ax ? (int *)*pc : pc + 1;}                   // jump if ax is not zero&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;子函数调用&#34;&gt;子函数调用&lt;/h4&gt;
&lt;p&gt;这是汇编中最难理解的部分，所以合在一起说，要引入的命令有 &lt;code&gt;CALL&lt;/code&gt;, &lt;code&gt;ENT&lt;/code&gt;, &lt;code&gt;ADJ&lt;/code&gt; 及 &lt;code&gt;LEV&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;首先我们介绍 &lt;code&gt;CALL &amp;lt;addr&amp;gt;&lt;/code&gt; 与 &lt;code&gt;RET&lt;/code&gt; 指令，&lt;code&gt;CALL&lt;/code&gt; 的作用是跳转到地址为 &lt;code&gt;&amp;lt;addr&amp;gt;&lt;/code&gt; 的子函数，&lt;code&gt;RET&lt;/code&gt; 则用于从子函数中返回。&lt;/p&gt;
&lt;p&gt;为什么不能直接使用 &lt;code&gt;JMP&lt;/code&gt; 指令呢？原因是当我们从子函数中返回时，程序需要回到跳转之前的地方继续运行，这就需要事先将这个位置信息存储起来。反过来，子函数要返回时，就需要获取并恢复这个信息。因此实际中我们将 &lt;code&gt;PC&lt;/code&gt; 保存在栈中。如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (op == CALL) {*--sp = (int)(pc+1); pc = (int *)*pc;}           // call subroutine
//else if (op == RET)  {pc = (int *)*sp++;}                              // return from subroutine;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;这里我们把 &lt;code&gt;RET&lt;/code&gt; 相关的内容注释了，是因为之后我们将用 &lt;code&gt;LEV&lt;/code&gt; 指令来代替它。&lt;/p&gt;
&lt;p&gt;在实际调用函数时，不仅要考虑函数的地址，还要考虑如何传递参数和如何返回结果。这里我们约定，如果子函数有返回结果，那么就在返回时保存在 &lt;code&gt;ax&lt;/code&gt; 中，它可以是一个值，也可以是一个地址。那么参数的传递呢？&lt;/p&gt;
&lt;p&gt;各种编程语言关于如何调用子函数有不同的约定，例如 C 语言的调用标准是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由调用者将参数入栈。&lt;/li&gt;
&lt;li&gt;调用结束时，由调用者将参数出栈。&lt;/li&gt;
&lt;li&gt;参数逆序入栈。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;事先声明一下，我们的编译器参数是顺序入栈的，下面的例子（C 语言调用标准）取自 &lt;a href=&#34;https://en.wikipedia.org/wiki/X86_calling_conventions&#34;&gt;维基百科&lt;/a&gt;：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;int callee(int, int, int);

int caller(void)
{
	int i, ret;

	ret = callee(1, 2, 3);
	ret += 5;
	return ret;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;会生成如下的 x86 汇编代码：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-assembly&#34; data-language=&#34;assembly&#34;&gt;&lt;code class=&#34;language-assembly&#34;&gt;caller:
	; make new call frame
	push    ebp
	mov     ebp, esp
        sub     1, esp       ; save stack for variable: i
	; push call arguments
	push    3
	push    2
	push    1
	; call subroutine &#39;callee&#39;
	call    callee
	; remove arguments from frame
	add     esp, 12
	; use subroutine result
	add     eax, 5
	; restore old call frame
        mov     esp, ebp
	pop     ebp
	; return
	ret&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;上面这段代码在我们自己的虚拟机里会有几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;push ebp&lt;/code&gt;，但我们的 &lt;code&gt;PUSH&lt;/code&gt; 指令并无法指定寄存器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mov ebp, esp&lt;/code&gt;，我们的 &lt;code&gt;MOV&lt;/code&gt; 指令同样功能不足。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add esp, 12&lt;/code&gt;，也是一样的问题（尽管我们还没定义）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;也就是说由于我们的指令过于简单（如只能操作&lt;code&gt;ax&lt;/code&gt;寄存器），所以用上面提到的指令，我们连函数调用都无法实现。而我们又不希望扩充现有指令的功能，因为这样实现起来就会变得复杂，因此我们采用的方法是增加指令集。毕竟我们不是真正的计算机，增加指令会消耗许多资源（钱）。&lt;/p&gt;
&lt;h4 id=&#34;ENT&#34;&gt;ENT&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ENT &amp;lt;size&amp;gt;&lt;/code&gt; 指的是 &lt;code&gt;enter&lt;/code&gt;，用于实现 ‘make new call frame’ 的功能，即保存当前的栈指针，同时在栈上保留一定的空间，用以存放局部变量。对应的汇编代码为：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-assembly&#34; data-language=&#34;assembly&#34;&gt;&lt;code class=&#34;language-assembly&#34;&gt;; make new call frame
push    ebp
mov     ebp, esp
       sub     1, esp       ; save stack for variable: i&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;实现如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (op == ENT)  {*--sp = (int)bp; bp = sp; sp = sp - *pc++;}      // make new stack frame&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;ADJ&#34;&gt;ADJ&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ADJ &amp;lt;size&amp;gt;&lt;/code&gt; 用于实现 ‘remove arguments from frame’。在将调用子函数时压入栈中的数据清除，本质上是因为我们的 &lt;code&gt;ADD&lt;/code&gt; 指令功能有限。对应的汇编代码为：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-assembly&#34; data-language=&#34;assembly&#34;&gt;&lt;code class=&#34;language-assembly&#34;&gt;; remove arguments from frame
add     esp, 12&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;实现如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (op == ADJ)  {sp = sp + *pc++;}                                // add esp, &amp;lt;size&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;LEV&#34;&gt;LEV&lt;/h4&gt;
&lt;p&gt;本质上这个指令并不是必需的，只是我们的指令集中并没有 &lt;code&gt;POP&lt;/code&gt; 指令。并且三条指令写来比较麻烦且浪费空间，所以用一个指令代替。对应的汇编指令为：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-assembly&#34; data-language=&#34;assembly&#34;&gt;&lt;code class=&#34;language-assembly&#34;&gt;; restore old call frame
       mov     esp, ebp
pop     ebp
; return
ret&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;具体的实现如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (op == LEV)  {sp = bp; bp = (int *)*sp++; pc = (int *)*sp++;}  // restore call frame and PC&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;注意的是，&lt;code&gt;LEV&lt;/code&gt; 已经把 &lt;code&gt;RET&lt;/code&gt; 的功能包含了，所以我们不再需要 &lt;code&gt;RET&lt;/code&gt; 指令。&lt;/p&gt;
&lt;h4 id=&#34;LEA&#34;&gt;LEA&lt;/h4&gt;
&lt;p&gt;上面的一些指令解决了调用帧的问题，但还有一个问题是如何在子函数中获得传入的参数。这里我们首先要了解的是当参数调用时，栈中的调用帧是什么样的。我们依旧用上面的例子（只是现在用“顺序”调用参数）：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;sub_function(arg1, arg2, arg3);

|    ....       | high address
+---------------+
| arg: 1        |    new_bp + 4
+---------------+
| arg: 2        |    new_bp + 3
+---------------+
| arg: 3        |    new_bp + 2
+---------------+
|return address |    new_bp + 1
+---------------+
| old BP        | &amp;lt;- new BP
+---------------+
| local var 1   |    new_bp - 1
+---------------+
| local var 2   |    new_bp - 2
+---------------+
|    ....       |  low address&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;所以为了获取第一个参数，我们需要得到 &lt;code&gt;new_bp + 4&lt;/code&gt;，但就如上面的说，我们的 &lt;code&gt;ADD&lt;/code&gt; 指令无法操作除 &lt;code&gt;ax&lt;/code&gt; 外的寄存器，所以我们提供了一个新的指令：&lt;code&gt;LEA &amp;lt;offset&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实现如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (op == LEA)  {ax = (int)(bp + *pc++);}                         // load address for arguments.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;以上就是我们为了实现函数调用需要的指令了。&lt;/p&gt;
&lt;h3 id=&#34;运算符指令&#34;&gt;运算符指令&lt;/h3&gt;
&lt;p&gt;我们为 C 语言中支持的运算符都提供对应汇编指令。每个运算符都是二元的，即有两个参数，第一个参数放在栈顶，第二个参数放在 &lt;code&gt;ax&lt;/code&gt; 中。这个顺序要特别注意。因为像 &lt;code&gt;-&lt;/code&gt;，&lt;code&gt;/&lt;/code&gt; 之类的运算符是与参数顺序有关的。计算后会将栈顶的参数退栈，结果存放在寄存器 &lt;code&gt;ax&lt;/code&gt; 中。因此计算结束后，两个参数都无法取得了（汇编的意义上，存在内存地址上就另当别论）。&lt;/p&gt;
&lt;p&gt;实现如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (op == OR)  ax = *sp++ | ax;
else if (op == XOR) ax = *sp++ ^ ax;
else if (op == AND) ax = *sp++ &amp;amp; ax;
else if (op == EQ)  ax = *sp++ == ax;
else if (op == NE)  ax = *sp++ != ax;
else if (op == LT)  ax = *sp++ &amp;lt; ax;
else if (op == LE)  ax = *sp++ &amp;lt;= ax;
else if (op == GT)  ax = *sp++ &amp;gt;  ax;
else if (op == GE)  ax = *sp++ &amp;gt;= ax;
else if (op == SHL) ax = *sp++ &amp;lt;&amp;lt; ax;
else if (op == SHR) ax = *sp++ &amp;gt;&amp;gt; ax;
else if (op == ADD) ax = *sp++ + ax;
else if (op == SUB) ax = *sp++ - ax;
else if (op == MUL) ax = *sp++ * ax;
else if (op == DIV) ax = *sp++ / ax;
else if (op == MOD) ax = *sp++ % ax;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;内置函数&#34;&gt;内置函数&lt;/h3&gt;
&lt;p&gt;写的程序要”有用“，除了核心的逻辑外还需要输入输出，例如 C 语言中我们经常使用的 &lt;code&gt;printf&lt;/code&gt; 函数就是用于输出。但是 &lt;code&gt;printf&lt;/code&gt; 函数的实现本身就十分复杂，如果我们的编译器要达到自举，就势必要实现 &lt;code&gt;printf&lt;/code&gt; 之类的函数，但它又与编译器没有太大的联系，因此我们继续实现新的指令，从虚拟机的角度予以支持。&lt;/p&gt;
&lt;p&gt;编译器中我们需要用到的函数有：&lt;code&gt;exit&lt;/code&gt;, &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;malloc&lt;/code&gt;, &lt;code&gt;memset&lt;/code&gt; 及 &lt;code&gt;memcmp&lt;/code&gt;。代码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (op == EXIT) { printf(&#34;exit(%d)&#34;, *sp); return *sp;}
else if (op == OPEN) { ax = open((char *)sp[1], sp[0]); }
else if (op == CLOS) { ax = close(*sp);}
else if (op == READ) { ax = read(sp[2], (char *)sp[1], *sp); }
else if (op == PRTF) { tmp = sp + pc[1]; ax = printf((char *)tmp[-1], tmp[-2], tmp[-3], tmp[-4], tmp[-5], tmp[-6]); }
else if (op == MALC) { ax = (int)malloc(*sp);}
else if (op == MSET) { ax = (int)memset((char *)sp[2], sp[1], *sp);}
else if (op == MCMP) { ax = memcmp((char *)sp[2], (char *)sp[1], *sp);}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;这里的原理是，我们的电脑上已经有了这些函数的实现，因此编译编译器时，这些函数的二进制代码就被编译进了我们的编译器，因此在我们的编译器/虚拟机上运行我们提供的这些指令时，这些函数就是可用的。换句话说就是不需要我们自己去实现了。&lt;/p&gt;
&lt;p&gt;最后再加上一个错误判断：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else {
    printf(&#34;unknown instruction:%d\n&#34;, op);
    return -1;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;测试&#34;&gt;测试&lt;/h3&gt;
&lt;p&gt;下面我们用我们的汇编写一小段程序，来计算 &lt;code&gt;10+20&lt;/code&gt;，在 &lt;code&gt;main&lt;/code&gt; 函数中加入下列代码：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;int main(int argc, char *argv[])
{
    ax = 0;
    ...

    i = 0;
    text[i++] = IMM;
    text[i++] = 10;
    text[i++] = PUSH;
    text[i++] = IMM;
    text[i++] = 20;
    text[i++] = ADD;
    text[i++] = PUSH;
    text[i++] = EXIT;
    pc = text;

    ...
    program();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;编译程序 &lt;code&gt;gcc xc-tutor.c&lt;/code&gt;，运行程序：&lt;code&gt;./a.out hello.c&lt;/code&gt;。输出&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;exit(30)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;另外，我们的代码里有一些指针的强制转换，默认是 32 位的，因此在 64 位机器下，会出现 &lt;code&gt;segmentation fault&lt;/code&gt;，解决方法（二选一）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译时加上 &lt;code&gt;-m32&lt;/code&gt; 参数：&lt;code&gt;gcc -m32 xc-tutor.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在代码的开头，增加 &lt;code&gt;#define int long long&lt;/code&gt;，&lt;code&gt;long long&lt;/code&gt; 是 64 位的，不会出现强制转换后的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意我们的之前的程序需要指令一个源文件，只是现在还用不着，但从结果可以看出，我们的虚拟机还是工作良好的。&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;本章中我们回顾了计算机的内部运行原理，并仿照 x86 汇编指令设计并实现了我们自己的指令集。希望通过本章的学习，你能对计算机程序的原理有一定的了解，同时能对汇编语言有一定的概念，因为汇编语言就是 C 编译器的输出。&lt;/p&gt;
&lt;p&gt;本章的代码可以在 &lt;a href=&#34;https://github.com/lotabout/write-a-C-interpreter/tree/step-1&#34;&gt;Github&lt;/a&gt; 上下载，也可以直接 clone&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone -b step-1 https://github.com/lotabout/write-a-C-interpreter&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;实际计算机中，添加一个新的指令需要设计许多新的电路，会增加许多的成本，但我们的虚拟机中，新的指令几乎不消耗资源，因此我们可以利用这一点，用更多的指令来完成更多的功能，从而简化具体的实现。&lt;/p&gt;
&lt;h2 id=&#34;词法分析器&#34;&gt;词法分析器&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本章我们要讲解如何构建词法分析器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;什么是词法分析器&#34;&gt;什么是词法分析器&lt;/h3&gt;
&lt;p&gt;简而言之，词法分析器用于对源码字符串做预处理，以减少语法分析器的复杂程度。&lt;/p&gt;
&lt;p&gt;词法分析器以源码字符串为输入，输出为标记流（token stream），即一连串的标记，每个标记通常包括： &lt;code&gt;(token, token value)&lt;/code&gt; 即标记本身和标记的值。例如，源码中若包含一个数字 &lt;code&gt;&#39;998&#39;&lt;/code&gt; ，词法分析器将输出 &lt;code&gt;(Number, 998)&lt;/code&gt;，即（数字，998）。再例如：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;2 + 3 * (4 - 5)
=&amp;gt;
(Number, 2) Add (Number, 3) Multiply Left-Bracket (Number, 4) Subtract (Number, 5) Right-Bracket&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;通过词法分析器的预处理，语法分析器的复杂度会大大降低，这点在后面的语法分析器我们就能体会。&lt;/p&gt;
&lt;h3 id=&#34;词法分析器与编译器&#34;&gt;词法分析器与编译器&lt;/h3&gt;
&lt;p&gt;要是深入词法分析器，你就会发现，它的本质上也是编译器。我们的编译器是以标记流为输入，输出汇编代码，而词法分析器则是以源码字符串为输入，输出标记流。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;                   +-------+                      +--------+
-- source code --&amp;gt; | lexer | --&amp;gt; token stream --&amp;gt; | parser | --&amp;gt; assembly
                   +-------+                      +--------+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;在这个前提下，我们可以这样认为：直接从源代码编译成汇编代码是很困难的，因为输入的字符串比较难处理。所以我们先编写一个较为简单的编译器（词法分析器）来将字符串转换成标记流，而标记流对于语法分析器而言就容易处理得多了。&lt;/p&gt;
&lt;h3 id=&#34;词法分析器的实现&#34;&gt;词法分析器的实现&lt;/h3&gt;
&lt;p&gt;由于词法分析的工作很常见，但又枯燥且容易出错，所以人们已经开发出了许多工具来生成词法分析器，如 &lt;code&gt;lex, flex&lt;/code&gt;。这些工具允许我们通过正则表达式来识别标记。&lt;/p&gt;
&lt;p&gt;这里注意的是，我们并不会一次性地将所有源码全部转换成标记流，原因有二：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字符串转换成标记流有时是有状态的，即与代码的上下文是有关系的。&lt;/li&gt;
&lt;li&gt;保存所有的标记流没有意义且浪费空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以实际的处理方法是提供一个函数（即前几篇中提到的 &lt;code&gt;next()&lt;/code&gt;），每次调用该函数则返回下一个标记。&lt;/p&gt;
&lt;h4 id=&#34;支持的标记&#34;&gt;支持的标记&lt;/h4&gt;
&lt;p&gt;在全局中添加如下定义：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;// tokens and classes (operators last and in precedence order)
enum {
  Num = 128, Fun, Sys, Glo, Loc, Id,
  Char, Else, Enum, If, Int, Return, Sizeof, While,
  Assign, Cond, Lor, Lan, Or, Xor, And, Eq, Ne, Lt, Gt, Le, Ge, Shl, Shr, Add, Sub, Mul, Div, Mod, Inc, Dec, Brak
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;这些就是我们要支持的标记符。例如，我们会将 &lt;code&gt;=&lt;/code&gt; 解析为 &lt;code&gt;Assign&lt;/code&gt;；将 &lt;code&gt;==&lt;/code&gt; 解析为 &lt;code&gt;Eq&lt;/code&gt;；将 &lt;code&gt;!=&lt;/code&gt; 解析为 &lt;code&gt;Ne&lt;/code&gt; 等等。&lt;/p&gt;
&lt;p&gt;所以这里我们会有这样的印象，一个标记（token）可能包含多个字符，且多数情况下如此。而词法分析器能减小语法分析复杂度的原因，正是因为它相当于通过一定的编码（更多的标记）来压缩了源码字符串。&lt;/p&gt;
&lt;p&gt;当然，上面这些标记是有顺序的，跟它们在 C 语言中的优先级有关，如 &lt;code&gt;*(Mul)&lt;/code&gt; 的优先级就要高于 &lt;code&gt;+(Add)&lt;/code&gt;。它们的具体使用在后面的语法分析中会提到。&lt;/p&gt;
&lt;p&gt;最后要注意的是还有一些字符，它们自己就构成了标记，如右方括号 &lt;code&gt;]&lt;/code&gt; 或波浪号 &lt;code&gt;~&lt;/code&gt; 等。我们不另外处理它们的原因是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它们是单字符的，即并不是多个字符共同构成标记（如 &lt;code&gt;==&lt;/code&gt; 需要两个字符）；&lt;/li&gt;
&lt;li&gt;它们不涉及优先级关系。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;词法分析器的框架&#34;&gt;词法分析器的框架&lt;/h4&gt;
&lt;p&gt;即 &lt;code&gt;next()&lt;/code&gt; 函数的主体：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;void next() {
    char *last_pos;
    int hash;

    while (token = *src) {
        ++src;
        // parse token here
    }
    return;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;这里的一个问题是，为什么要用 &lt;code&gt;while&lt;/code&gt; 循环呢？这就涉及到编译器（记得我们说过词法分析器也是某种意义上的编译器）的一个问题：如何处理错误？&lt;/p&gt;
&lt;p&gt;对词法分析器而言，若碰到了一个我们不认识的字符该怎么处理？一般处理的方法有两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;指出错误发生的位置，并退出整个程序&lt;/li&gt;
&lt;li&gt;指出错误发生的位置，跳过当前错误并继续编译&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个 &lt;code&gt;while&lt;/code&gt; 循环的作用就是跳过这些我们不识别的字符，我们同时还用它来处理空白字符。我们知道，C 语言中空格是用来作为分隔用的，并不作为语法的一部分。因此在实现中我们将它作为“不识别”的字符，这个 &lt;code&gt;while&lt;/code&gt; 循环可以用来跳过它。&lt;/p&gt;
&lt;h4 id=&#34;换行符&#34;&gt;换行符&lt;/h4&gt;
&lt;p&gt;换行符和空格类似，但有一点不同，每次遇到换行符，我们需要将当前的行号加一：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;// parse token here
...

if (token == &#39;\n&#39;) {
    ++line;
}
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;宏定义&#34;&gt;宏定义&lt;/h4&gt;
&lt;p&gt;C 语言的宏定义以字符 &lt;code&gt;#&lt;/code&gt; 开头，如 &lt;code&gt;# include &amp;lt;stdio.h&amp;gt;&lt;/code&gt;。我们的编译器并不支持宏定义，所以直接跳过它们。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == &#39;#&#39;) {
    // skip macro, because we will not support it
    while (*src != 0 &amp;amp;&amp;amp; *src != &#39;\n&#39;) {
        src++;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;标识符与符号表&#34;&gt;标识符与符号表&lt;/h4&gt;
&lt;p&gt;标识符（identifier）可以理解为变量名。对于语法分析而言，我们并不关心一个变量具体叫什么名字，而只关心这个变量名代表的唯一标识。例如 &lt;code&gt;int a;&lt;/code&gt; 定义了变量 &lt;code&gt;a&lt;/code&gt;，而之后的语句 &lt;code&gt;a = 10&lt;/code&gt;，我们需要知道这两个 &lt;code&gt;a&lt;/code&gt; 指向的是同一个变量。&lt;/p&gt;
&lt;p&gt;基于这个理由，词法分析器会把扫描到的标识符全都保存到一张表中，遇到新的标识符就去查这张表，如果标识符已经存在，就返回它的唯一标识。&lt;/p&gt;
&lt;p&gt;那么我们怎么表示标识符呢？如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;struct identifier {
    int token;
    int hash;
    char * name;
    int class;
    int type;
    int value;
    int Bclass;
    int Btype;
    int Bvalue;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;这里解释一下具体的含义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;token&lt;/code&gt;：该标识符返回的标记，理论上所有的变量返回的标记都应该是 &lt;code&gt;Id&lt;/code&gt;，但实际上由于我们还将在符号表中加入关键字如 &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; 等，它们都有对应的标记。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash&lt;/code&gt;：顾名思义，就是这个标识符的哈希值，用于标识符的快速比较。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;：存放标识符本身的字符串。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;：该标识符的类别，如数字，全局变量或局部变量等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;：标识符的类型，即如果它是个变量，变量是 &lt;code&gt;int&lt;/code&gt; 型、&lt;code&gt;char&lt;/code&gt; 型还是指针型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt;：存放这个标识符的值，如标识符是函数，刚存放函数的地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BXXXX&lt;/code&gt;：C 语言中标识符可以是全局的也可以是局部的，当局部标识符的名字与全局标识符相同时，用作保存全局标识符的信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由上可以看出，我们实现的词法分析器与传统意义上的词法分析器不太相同。传统意义上的符号表只需要知道标识符的唯一标识即可，而我们还存放了一些只有语法分析器才会得到的信息，如 &lt;code&gt;type&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;由于我们的目标是能自举，而我们定义的语法不支持 &lt;code&gt;struct&lt;/code&gt;，故而使用下列方式。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-assembly&#34; data-language=&#34;assembly&#34;&gt;&lt;code class=&#34;language-assembly&#34;&gt;Symbol table:
----+-----+----+----+----+-----+-----+-----+------+------+----
 .. |token|hash|name|type|class|value|btype|bclass|bvalue| ..
----+-----+----+----+----+-----+-----+-----+------+------+----
    |&amp;lt;---       one single identifier                ---&amp;gt;|&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;即用一个整型数组来保存相关的ID信息。每个ID占用数组中的9个空间，分析标识符的相关代码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;int token_val;                // value of current token (mainly for number)
int *current_id,              // current parsed ID
    *symbols;                 // symbol table

// fields of identifier
enum {Token, Hash, Name, Type, Class, Value, BType, BClass, BValue, IdSize};


void next() {
        ...

        else if ((token &amp;gt;= &#39;a&#39; &amp;amp;&amp;amp; token &amp;lt;= &#39;z&#39;) || (token &amp;gt;= &#39;A&#39; &amp;amp;&amp;amp; token &amp;lt;= &#39;Z&#39;) || (token == &#39;_&#39;)) {

            // parse identifier
            last_pos = src - 1;
            hash = token;

            while ((*src &amp;gt;= &#39;a&#39; &amp;amp;&amp;amp; *src &amp;lt;= &#39;z&#39;) || (*src &amp;gt;= &#39;A&#39; &amp;amp;&amp;amp; *src &amp;lt;= &#39;Z&#39;) || (*src &amp;gt;= &#39;0&#39; &amp;amp;&amp;amp; *src &amp;lt;= &#39;9&#39;) || (*src == &#39;_&#39;)) {
                hash = hash * 147 + *src;
                src++;
            }

            // look for existing identifier, linear search
            current_id = symbols;
            while (current_id[Token]) {
                if (current_id[Hash] == hash &amp;amp;&amp;amp; !memcmp((char *)current_id[Name], last_pos, src - last_pos)) {
                    //found one, return
                    token = current_id[Token];
                    return;
                }
                current_id = current_id + IdSize;
            }


            // store new ID
            current_id[Name] = (int)last_pos;
            current_id[Hash] = hash;
            token = current_id[Token] = Id;
            return;
        }
        ...
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;查找已有标识符的方法是线性查找 &lt;code&gt;symbols&lt;/code&gt; 表。&lt;/p&gt;
&lt;h4 id=&#34;数字&#34;&gt;数字&lt;/h4&gt;
&lt;p&gt;数字中较为复杂的一点是需要支持十进制、十六进制及八进制。逻辑也较为直接，可能唯一不好理解的是获取十六进制的值相关的代码。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;token_val = token_val * 16 + (token &amp;amp; 15) + (token &amp;gt;= &#39;A&#39; ? 9 : 0);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;这里要注意的是在ASCII码中，字符&lt;code&gt;a&lt;/code&gt;对应的十六进制值是 &lt;code&gt;61&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt;是&lt;code&gt;41&lt;/code&gt;，故通过 &lt;code&gt;(token &amp;amp; 15)&lt;/code&gt; 可以得到个位数的值。其它就不多说了，这里这样写的目的是装B（其实是抄 c4 的源代码的）。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;void next() {
        ...


        else if (token &amp;gt;= &#39;0&#39; &amp;amp;&amp;amp; token &amp;lt;= &#39;9&#39;) {
            // parse number, three kinds: dec(123) hex(0x123) oct(017)
            token_val = token - &#39;0&#39;;
            if (token_val &amp;gt; 0) {
                // dec, starts with [1-9]
                while (*src &amp;gt;= &#39;0&#39; &amp;amp;&amp;amp; *src &amp;lt;= &#39;9&#39;) {
                    token_val = token_val*10 + *src++ - &#39;0&#39;;
                }
            } else {
                // starts with number 0
                if (*src == &#39;x&#39; || *src == &#39;X&#39;) {
                    //hex
                    token = *++src;
                    while ((token &amp;gt;= &#39;0&#39; &amp;amp;&amp;amp; token &amp;lt;= &#39;9&#39;) || (token &amp;gt;= &#39;a&#39; &amp;amp;&amp;amp; token &amp;lt;= &#39;f&#39;) || (token &amp;gt;= &#39;A&#39; &amp;amp;&amp;amp; token &amp;lt;= &#39;F&#39;)) {
                        token_val = token_val * 16 + (token &amp;amp; 15) + (token &amp;gt;= &#39;A&#39; ? 9 : 0);
                        token = *++src;
                    }
                } else {
                    // oct
                    while (*src &amp;gt;= &#39;0&#39; &amp;amp;&amp;amp; *src &amp;lt;= &#39;7&#39;) {
                        token_val = token_val*8 + *src++ - &#39;0&#39;;
                    }
                }
            }

            token = Num;
            return;
        }

        ...
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;字符串&#34;&gt;字符串&lt;/h4&gt;
&lt;p&gt;在分析时，如果分析到字符串，我们需要将它存放到前一篇文章中说的 &lt;code&gt;data&lt;/code&gt; 段中。然后返回它在 &lt;code&gt;data&lt;/code&gt; 段中的地址。另一个特殊的地方是我们需要支持转义符。例如用 &lt;code&gt;\n&lt;/code&gt; 表示换行符。由于本编译器的目的是达到自己编译自己，所以代码中并没有支持除 &lt;code&gt;\n&lt;/code&gt; 的转义符，如 &lt;code&gt;\t&lt;/code&gt;, &lt;code&gt;\r&lt;/code&gt; 等，但仍支持 &lt;code&gt;\a&lt;/code&gt; 表示字符 &lt;code&gt;a&lt;/code&gt; 的语法，如 &lt;code&gt;\&#34;&lt;/code&gt; 表示 &lt;code&gt;&#34;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在分析时，我们将同时分析单个字符如 &lt;code&gt;&#39;a&#39;&lt;/code&gt; 和字符串如 &lt;code&gt;&#34;a string&#34;&lt;/code&gt;。若得到的是单个字符，我们以 &lt;code&gt;Num&lt;/code&gt; 的形式返回。相关代码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;void next() {
        ...

        else if (token == &#39;&#34;&#39; || token == &#39;\&#39;&#39;) {
            // parse string literal, currently, the only supported escape
            // character is &#39;\n&#39;, store the string literal into data.
            last_pos = data;
            while (*src != 0 &amp;amp;&amp;amp; *src != token) {
                token_val = *src++;
                if (token_val == &#39;\\&#39;) {
                    // escape character
                    token_val = *src++;
                    if (token_val == &#39;n&#39;) {
                        token_val = &#39;\n&#39;;
                    }
                }

                if (token == &#39;&#34;&#39;) {
                    *data++ = token_val;
                }
            }

            src++;
            // if it is a single character, return Num token
            if (token == &#39;&#34;&#39;) {
                token_val = (int)last_pos;
            } else {
                token = Num;
            }

            return;
        }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注释&#34;&gt;注释&lt;/h4&gt;
&lt;p&gt;在我们的 C 语言中，只支持 &lt;code&gt;//&lt;/code&gt; 类型的注释，不支持 &lt;code&gt;/* comments */&lt;/code&gt; 的注释。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;void next() {
        ...

        else if (token == &#39;/&#39;) {
            if (*src == &#39;/&#39;) {
                // skip comments
                while (*src != 0 &amp;amp;&amp;amp; *src != &#39;\n&#39;) {
                    ++src;
                }
            } else {
                // divide operator
                token = Div;
                return;
            }
        }

        ...
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;这里我们要额外介绍 &lt;code&gt;lookahead&lt;/code&gt; 的概念，即提前看多个字符。上述代码中我们看到，除了跳过注释，我们还可能返回除号 &lt;code&gt;/(Div)&lt;/code&gt; 标记。&lt;/p&gt;
&lt;p&gt;提前看字符的原理是：有一个或多个标记是以同样的字符开头的（如本小节中的注释与除号），因此只凭当前的字符我们并无法确定具体应该解释成哪一个标记，所以只能再向前查看字符，如本例需向前查看一个字符，若是 &lt;code&gt;/&lt;/code&gt; 则说明是注释，反之则是除号。&lt;/p&gt;
&lt;p&gt;我们之前说过，词法分析器本质上也是编译器，其实提前看字符的概念也存在于编译器，只是这时就是提前看k个“标记”而不是“字符”了。平时听到的 &lt;code&gt;LL(k)&lt;/code&gt; 中的 &lt;code&gt;k&lt;/code&gt; 就是需要向前看的标记的个数了。&lt;/p&gt;
&lt;p&gt;另外，我们用词法分析器将源码转换成标记流，能减小语法分析复杂度，原因之一就是减少了语法分析器需要“向前看”的字符个数。&lt;/p&gt;
&lt;h4 id=&#34;其它&#34;&gt;其它&lt;/h4&gt;
&lt;p&gt;其它的标记的解析就相对容易一些了，我们直接贴上代码：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;void next() {
        ...

        else if (token == &#39;=&#39;) {
            // parse &#39;==&#39; and &#39;=&#39;
            if (*src == &#39;=&#39;) {
                src ++;
                token = Eq;
            } else {
                token = Assign;
            }
            return;
        }
        else if (token == &#39;+&#39;) {
            // parse &#39;+&#39; and &#39;++&#39;
            if (*src == &#39;+&#39;) {
                src ++;
                token = Inc;
            } else {
                token = Add;
            }
            return;
        }
        else if (token == &#39;-&#39;) {
            // parse &#39;-&#39; and &#39;--&#39;
            if (*src == &#39;-&#39;) {
                src ++;
                token = Dec;
            } else {
                token = Sub;
            }
            return;
        }
        else if (token == &#39;!&#39;) {
            // parse &#39;!=&#39;
            if (*src == &#39;=&#39;) {
                src++;
                token = Ne;
            }
            return;
        }
        else if (token == &#39;&amp;lt;&#39;) {
            // parse &#39;&amp;lt;=&#39;, &#39;&amp;lt;&amp;lt;&#39; or &#39;&amp;lt;&#39;
            if (*src == &#39;=&#39;) {
                src ++;
                token = Le;
            } else if (*src == &#39;&amp;lt;&#39;) {
                src ++;
                token = Shl;
            } else {
                token = Lt;
            }
            return;
        }
        else if (token == &#39;&amp;gt;&#39;) {
            // parse &#39;&amp;gt;=&#39;, &#39;&amp;gt;&amp;gt;&#39; or &#39;&amp;gt;&#39;
            if (*src == &#39;=&#39;) {
                src ++;
                token = Ge;
            } else if (*src == &#39;&amp;gt;&#39;) {
                src ++;
                token = Shr;
            } else {
                token = Gt;
            }
            return;
        }
        else if (token == &#39;|&#39;) {
            // parse &#39;|&#39; or &#39;||&#39;
            if (*src == &#39;|&#39;) {
                src ++;
                token = Lor;
            } else {
                token = Or;
            }
            return;
        }
        else if (token == &#39;&amp;amp;&#39;) {
            // parse &#39;&amp;amp;&#39; and &#39;&amp;amp;&amp;amp;&#39;
            if (*src == &#39;&amp;amp;&#39;) {
                src ++;
                token = Lan;
            } else {
                token = And;
            }
            return;
        }
        else if (token == &#39;^&#39;) {
            token = Xor;
            return;
        }
        else if (token == &#39;%&#39;) {
            token = Mod;
            return;
        }
        else if (token == &#39;*&#39;) {
            token = Mul;
            return;
        }
        else if (token == &#39;[&#39;) {
            token = Brak;
            return;
        }
        else if (token == &#39;?&#39;) {
            token = Cond;
            return;
        }
        else if (token == &#39;~&#39; || token == &#39;;&#39; || token == &#39;{&#39; || token == &#39;}&#39; || token == &#39;(&#39; || token == &#39;)&#39; || token == &#39;]&#39; || token == &#39;,&#39; || token == &#39;:&#39;) {
            // directly return the character as token;
            return;
        }

        ...
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;代码较多，但主要逻辑就是向前看一个字符来确定真正的标记。&lt;/p&gt;
&lt;h4 id=&#34;关键字与内置函数&#34;&gt;关键字与内置函数&lt;/h4&gt;
&lt;p&gt;虽然上面写完了词法分析器，但还有一个问题需要考虑，那就是“关键字”，例如 &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt; 等。它们不能被作为普通的标识符，因为有特殊的含义。&lt;/p&gt;
&lt;p&gt;一般有两种处理方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;词法分析器中直接解析这些关键字。&lt;/li&gt;
&lt;li&gt;在语法分析前将关键字提前加入符号表。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里我们就采用第二种方法，将它们加入符号表，并提前为它们赋予必要的信息（还记得前面说的标识符 &lt;code&gt;Token&lt;/code&gt; 字段吗？）。这样当源代码中出现关键字时，它们会被解析成标识符，但由于符号表中已经有了相关的信息，我们就能知道它们是特殊的关键字。&lt;/p&gt;
&lt;p&gt;内置函数的行为也和关键字类似，不同的只是赋值的信息，在&lt;code&gt;main&lt;/code&gt;函数中进行初始化如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;// types of variable/function
enum { CHAR, INT, PTR };
int *idmain;                  // the `main` function

void main() {
    ...

    src = &#34;char else enum if int return sizeof while &#34;
          &#34;open read close printf malloc memset memcmp exit void main&#34;;

     // add keywords to symbol table
    i = Char;
    while (i &amp;lt;= While) {
        next();
        current_id[Token] = i++;
    }

    // add library to symbol table
    i = OPEN;
    while (i &amp;lt;= EXIT) {
        next();
        current_id[Class] = Sys;
        current_id[Type] = INT;
        current_id[Value] = i++;
    }

    next(); current_id[Token] = Char; // handle void type
    next(); idmain = current_id; // keep track of main

    ...
    program();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;代码&#34;&gt;代码&lt;/h3&gt;
&lt;p&gt;本章的代码可以在 &lt;a href=&#34;https://github.com/lotabout/write-a-C-interpreter/tree/step-2&#34;&gt;Github&lt;/a&gt; 上下载，也可以直接 clone&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;git clone -b step-2 https://github.com/lotabout/write-a-C-interpreter&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码运行后会出现 ‘Segmentation Falt’，这是正常的，因为它会尝试运行我们上一章创建的虚拟机，但其中并没有任何汇编代码。&lt;/p&gt;
&lt;h3 id=&#34;小结-2&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;本章我们为我们的编译器构建了词法分析器，通过本章的学习，我认为有几个要点需要强调：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;词法分析器的作用是对源码字符串进行预处理，作用是减小语法分析器的复杂程度。&lt;/li&gt;
&lt;li&gt;词法分析器本身可以认为是一个编译器，输入是源码，输出是标记流。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lookahead(k)&lt;/code&gt; 的概念，即向前看 &lt;code&gt;k&lt;/code&gt; 个字符或标记。&lt;/li&gt;
&lt;li&gt;词法分析中如何处理标识符与符号表。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下一章中，我们将介绍递归下降的语法分析器。我们下一章见。&lt;/p&gt;
&lt;h2 id=&#34;递归下降&#34;&gt;递归下降&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本章我们将讲解递归下降的方法，并用它完成一个基本的四则运算的语法分析器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;什么是递归下降&#34;&gt;什么是递归下降&lt;/h3&gt;
&lt;p&gt;传统上，编写语法分析器有两种方法，一种是自顶向下，一种是自底向上。自顶向下是从起始非终结符开始，不断地对非终结符进行分解，直到匹配输入的终结符；自底向上是不断地将终结符进行合并，直到合并成起始的非终结符。&lt;/p&gt;
&lt;p&gt;其中的自顶向下方法就是我们所说的递归下降。&lt;/p&gt;
&lt;h3 id=&#34;终结符与非终结符&#34;&gt;终结符与非终结符&lt;/h3&gt;
&lt;p&gt;没有学过编译原理的话可能并不知道什么是“终结符”，“非终结符”。这里我简单介绍一下。首先是 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%B7%B4%E7%A7%91%E6%96%AF%E8%8C%83%E5%BC%8F&#34;&gt;BNF&lt;/a&gt; 范式，就是一种用来描述语法的语言，例如，四则运算的规则可以表示如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;&amp;lt;expr&amp;gt; ::= &amp;lt;expr&amp;gt; + &amp;lt;term&amp;gt;
         | &amp;lt;expr&amp;gt; - &amp;lt;term&amp;gt;
         | &amp;lt;term&amp;gt;

&amp;lt;term&amp;gt; ::= &amp;lt;term&amp;gt; * &amp;lt;factor&amp;gt;
         | &amp;lt;term&amp;gt; / &amp;lt;factor&amp;gt;
         | &amp;lt;factor&amp;gt;

&amp;lt;factor&amp;gt; ::= ( &amp;lt;expr&amp;gt; )
           | Num&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;用尖括号 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 括起来的就称作 &lt;strong&gt;非终结符&lt;/strong&gt; ，因为它们可以用 &lt;code&gt;::=&lt;/code&gt; 右侧的式子代替。&lt;code&gt;|&lt;/code&gt; 表示选择，如 &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; 可以是 &lt;code&gt;&amp;lt;expr&amp;gt; + &amp;lt;term&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;expr&amp;gt; - &amp;lt;term&amp;gt;&lt;/code&gt;或 &lt;code&gt;&amp;lt;term&amp;gt;&lt;/code&gt; 中的一种。而没有出现在&lt;code&gt;::=&lt;/code&gt;左边的就称作 &lt;strong&gt;终结符&lt;/strong&gt; ，一般终结符对应于词法分析器输出的标记。&lt;/p&gt;
&lt;h3 id=&#34;四则运算的递归下降&#34;&gt;四则运算的递归下降&lt;/h3&gt;
&lt;p&gt;例如，我们对 &lt;code&gt;3 * (4 + 2)&lt;/code&gt; 进行语法分析。我们假设词法分析器已经正确地将其中的数字识别成了标记 &lt;code&gt;Num&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;递归下降是从起始的非终结符开始（顶），本例中是 &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt;，实际中可以自己指定，不指定的话一般认为是第一个出现的非终结符。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;1. &amp;lt;expr&amp;gt; =&amp;gt; &amp;lt;expr&amp;gt;
2.           =&amp;gt; &amp;lt;term&amp;gt;        * &amp;lt;factor&amp;gt;
3.              =&amp;gt; &amp;lt;factor&amp;gt;     |
4.                 =&amp;gt; Num (3)   |
5.                              =&amp;gt; ( &amp;lt;expr&amp;gt; )
6.                                   =&amp;gt; &amp;lt;expr&amp;gt;           + &amp;lt;term&amp;gt;
7.                                      =&amp;gt; &amp;lt;term&amp;gt;          |
8.                                         =&amp;gt; &amp;lt;factor&amp;gt;     |
9.                                            =&amp;gt; Num (4)   |
10.                                                        =&amp;gt; &amp;lt;factor&amp;gt;
11.                                                           =&amp;gt; Num (2)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，整个解析的过程是在不断对非终结符进行替换（向下），直到遇见了终结符（底）。而我们可以从解析的过程中看出，一些非终结符如&lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt;被递归地使用了。&lt;/p&gt;
&lt;h3 id=&#34;为什么选择递归下降&#34;&gt;为什么选择递归下降&lt;/h3&gt;
&lt;p&gt;从上小节对四则运算的递归下降解析可以看出，整个解析的过程和语法的 BNF 表示是十分接近的，更为重要的是，我们可以很容易地直接将 BNF 表示转换成实际的代码。方法是为每个产生式（即 &lt;code&gt;非终结符 ::= ...&lt;/code&gt;）生成一个同名的函数。&lt;/p&gt;
&lt;p&gt;这里会有一个疑问，就是上例中，当一个终结符有多个选择时，如何确定具体选择哪一个？如为什么用 &lt;code&gt;&amp;lt;expr&amp;gt; ::= &amp;lt;term&amp;gt; * &amp;lt;factor&amp;gt;&lt;/code&gt; 而不是 &lt;code&gt;&amp;lt;expr&amp;gt; ::= &amp;lt;term&amp;gt; / &amp;lt;factor&amp;gt;&lt;/code&gt; ？这就用到了上一章中提到的“向前看 k 个标记”的概念了。我们向前看一个标记，发现是 &lt;code&gt;*&lt;/code&gt;，而这个标记足够让我们确定用哪个表达式了。&lt;/p&gt;
&lt;p&gt;另外，递归下下降方法对 BNF 方法本身有一定的要求，否则会有一些问题，如经典的“左递归”问题。&lt;/p&gt;
&lt;h3 id=&#34;左递归&#34;&gt;左递归&lt;/h3&gt;
&lt;p&gt;原则上我们是不讲这么深入，但我们上面的四则运算的文法就是左递归的，而左递归的语法是没法直接使用递归下降的方法实现的。因此我们要消除左递归，消除后的文法如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;&amp;lt;expr&amp;gt; ::= &amp;lt;term&amp;gt; &amp;lt;expr_tail&amp;gt;
&amp;lt;expr_tail&amp;gt; ::= + &amp;lt;term&amp;gt; &amp;lt;expr_tail&amp;gt;
              | - &amp;lt;term&amp;gt; &amp;lt;expr_tail&amp;gt;
              | &amp;lt;empty&amp;gt;

&amp;lt;term&amp;gt; ::= &amp;lt;factor&amp;gt; &amp;lt;term_tail&amp;gt;
&amp;lt;term_tail&amp;gt; ::= * &amp;lt;factor&amp;gt; &amp;lt;term_tail&amp;gt;
              | / &amp;lt;factor&amp;gt; &amp;lt;term_tail&amp;gt;
              | &amp;lt;empty&amp;gt;

&amp;lt;factor&amp;gt; ::= ( &amp;lt;expr&amp;gt; )
           | Num&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;消除左递归的相关方法，这里不再多说，请自行查阅相关的资料。&lt;/p&gt;
&lt;h3 id=&#34;四则运算的实现&#34;&gt;四则运算的实现&lt;/h3&gt;
&lt;p&gt;本节中我们专注语法分析器部分的实现，具体实现很容易，我们直接贴上代码，就是上述的消除左递归后的文法直接转换而来的：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;int expr();

int factor() {
    int value = 0;
    if (token == &#39;(&#39;) {
        match(&#39;(&#39;);
        value = expr();
        match(&#39;)&#39;);
    } else {
        value = token_val;
        match(Num);
    }
    return value;
}

int term_tail(int lvalue) {
    if (token == &#39;*&#39;) {
        match(&#39;*&#39;);
        int value = lvalue * factor();
        return term_tail(value);
    } else if (token == &#39;/&#39;) {
        match(&#39;/&#39;);
        int value = lvalue / factor();
        return term_tail(value);
    } else {
        return lvalue;
    }
}

int term() {
    int lvalue = factor();
    return term_tail(lvalue);
}

int expr_tail(int lvalue) {
    if (token == &#39;+&#39;) {
        match(&#39;+&#39;);
        int value = lvalue + term();
        return expr_tail(value);
    } else if (token == &#39;-&#39;) {
        match(&#39;-&#39;);
        int value = lvalue - term();
        return expr_tail(value);
    } else {
        return lvalue;
    }
}

int expr() {
    int lvalue = term();
    return expr_tail(lvalue);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，有了BNF方法后，采用递归向下的方法来实现编译器是很直观的。&lt;/p&gt;
&lt;p&gt;我们把词法分析器的代码一并贴上：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;##include &amp;lt;stdio.h&amp;gt;
##include &amp;lt;stdlib.h&amp;gt;

enum {Num};
int token;
int token_val;
char *line = NULL;
char *src = NULL;

void next() {
    // skip white space
    while (*src == &#39; &#39; || *src == &#39;\t&#39;) {
        src ++;
    }

    token = *src++;

    if (token &amp;gt;= &#39;0&#39; &amp;amp;&amp;amp; token &amp;lt;= &#39;9&#39; ) {
        token_val = token - &#39;0&#39;;
        token = Num;

        while (*src &amp;gt;= &#39;0&#39; &amp;amp;&amp;amp; *src &amp;lt;= &#39;9&#39;) {
            token_val = token_val*10 + *src - &#39;0&#39;;
            src ++;
        }
        return;
    }
}

void match(int tk) {
    if (token != tk) {
        printf(&#34;expected token: %d(%c), got: %d(%c)\n&#34;, tk, tk, token, token);
        exit(-1);
    }
    next();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;最后是&lt;code&gt;main&lt;/code&gt;函数：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;int main(int argc, char *argv[])
{
    size_t linecap = 0;
    ssize_t linelen;
    while ((linelen = getline(&amp;amp;line, &amp;amp;linecap, stdin)) &amp;gt; 0) {
        src = line;
        next();
        printf(&#34;%d\n&#34;, expr());
    }
    return 0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;小结-3&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;本章中我们介绍了递归下降的方法，并用它来实现了四则运算的语法分析器。&lt;/p&gt;
&lt;p&gt;花这么大精力讲解递归下降方法，是因为几乎所有手工编写的语法分析器都或多或少地有它的影子。换句话说，掌握了递归下降的方法，就可以应付大多数的语法分析器编写。&lt;/p&gt;
&lt;p&gt;同时我们也用实例看到了理论（BNF 语法，左递归的消除）是如何帮助我们的工程实现的。尽管理论不是必需的，但如果能掌握它，对于提高我们的水平还是很有帮助的。&lt;/p&gt;
&lt;h2 id=&#34;变量定义&#34;&gt;变量定义&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本章中我们用 EBNF 来大致描述我们实现的 C 语言的文法，并实现其中解析变量定义部分。&lt;/p&gt;
&lt;p&gt;由于语法分析本身比较复杂，所以我们将它拆分成 3 个部分进行讲解，分别是：变量定义、函数定义、表达式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;EBNF-表示&#34;&gt;EBNF 表示&lt;/h3&gt;
&lt;p&gt;EBNF 是对前一章提到的 BNF 的扩展，它的语法更容易理解，实现起来也更直观。但真正看起来还是很烦，如果不想看可以跳过。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;program ::= {global_declaration}+

global_declaration ::= enum_decl | variable_decl | function_decl

enum_decl ::= &#39;enum&#39; [id] &#39;{&#39; id [&#39;=&#39; &#39;num&#39;] {&#39;,&#39; id [&#39;=&#39; &#39;num&#39;] &#39;}&#39;

variable_decl ::= type {&#39;*&#39;} id { &#39;,&#39; {&#39;*&#39;} id } &#39;;&#39;

function_decl ::= type {&#39;*&#39;} id &#39;(&#39; parameter_decl &#39;)&#39; &#39;{&#39; body_decl &#39;}&#39;

parameter_decl ::= type {&#39;*&#39;} id {&#39;,&#39; type {&#39;*&#39;} id}

body_decl ::= {variable_decl}, {statement}

statement ::= non_empty_statement | empty_statement

non_empty_statement ::= if_statement | while_statement | &#39;{&#39; statement &#39;}&#39;
                     | &#39;return&#39; expression | expression &#39;;&#39;

if_statement ::= &#39;if&#39; &#39;(&#39; expression &#39;)&#39; statement [&#39;else&#39; non_empty_statement]

while_statement ::= &#39;while&#39; &#39;(&#39; expression &#39;)&#39; non_empty_statement&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;其中 &lt;code&gt;expression&lt;/code&gt; 相关的内容我们放到后面解释，主要原因是我们的语言不支持跨函数递归，而为了实现自举，实际上我们也不能使用递归（亏我们说了一章的递归下降）。&lt;/p&gt;
&lt;p&gt;P.S. 我是先写程序再总结上面的文法，所以实际上它们间的对应关系并不是特别明显。&lt;/p&gt;
&lt;h3 id=&#34;解析变量的定义&#34;&gt;解析变量的定义&lt;/h3&gt;
&lt;p&gt;本章要讲解的就是上节文法中的 &lt;code&gt;enum_decl&lt;/code&gt; 和 &lt;code&gt;variable_decl&lt;/code&gt; 部分。&lt;/p&gt;
&lt;h4 id=&#34;program&#34;&gt;program()&lt;/h4&gt;
&lt;p&gt;首先是之前定义过的 &lt;code&gt;program&lt;/code&gt; 函数，将它改成：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;void program() {
    // get next token
    next();
    while (token &amp;gt; 0) {
        global_declaration();
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;我知道 &lt;code&gt;global_declaration&lt;/code&gt; 函数还没有出现过，但没有关系，采用自顶向下的编写方法就是要不断地实现我们需要的内容。下面是 &lt;code&gt;global_declaration&lt;/code&gt; 函数的内容：&lt;/p&gt;
&lt;h4 id=&#34;global-declaration&#34;&gt;global_declaration()&lt;/h4&gt;
&lt;p&gt;即全局的定义语句，包括变量定义，类型定义（只支持枚举）及函数定义。代码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;int basetype;    // the type of a declaration, make it global for convenience
int expr_type;   // the type of an expression

void global_declaration() {
    // global_declaration ::= enum_decl | variable_decl | function_decl
    //
    // enum_decl ::= &#39;enum&#39; [id] &#39;{&#39; id [&#39;=&#39; &#39;num&#39;] {&#39;,&#39; id [&#39;=&#39; &#39;num&#39;} &#39;}&#39;
    //
    // variable_decl ::= type {&#39;*&#39;} id { &#39;,&#39; {&#39;*&#39;} id } &#39;;&#39;
    //
    // function_decl ::= type {&#39;*&#39;} id &#39;(&#39; parameter_decl &#39;)&#39; &#39;{&#39; body_decl &#39;}&#39;


    int type; // tmp, actual type for variable
    int i; // tmp

    basetype = INT;

    // parse enum, this should be treated alone.
    if (token == Enum) {
        // enum [id] { a = 10, b = 20, ... }
        match(Enum);
        if (token != &#39;{&#39;) {
            match(Id); // skip the [id] part
        }
        if (token == &#39;{&#39;) {
            // parse the assign part
            match(&#39;{&#39;);
            enum_declaration();
            match(&#39;}&#39;);
        }

        match(&#39;;&#39;);
        return;
    }

    // parse type information
    if (token == Int) {
        match(Int);
    }
    else if (token == Char) {
        match(Char);
        basetype = CHAR;
    }

    // parse the comma seperated variable declaration.
    while (token != &#39;;&#39; &amp;amp;&amp;amp; token != &#39;}&#39;) {
        type = basetype;
        // parse pointer type, note that there may exist `int ****x;`
        while (token == Mul) {
            match(Mul);
            type = type + PTR;
        }

        if (token != Id) {
            // invalid declaration
            printf(&#34;%d: bad global declaration\n&#34;, line);
            exit(-1);
        }
        if (current_id[Class]) {
            // identifier exists
            printf(&#34;%d: duplicate global declaration\n&#34;, line);
            exit(-1);
        }
        match(Id);
        current_id[Type] = type;

        if (token == &#39;(&#39;) {
            current_id[Class] = Fun;
            current_id[Value] = (int)(text + 1); // the memory address of function
            function_declaration();
        } else {
            // variable declaration
            current_id[Class] = Glo; // global variable
            current_id[Value] = (int)data; // assign memory address
            data = data + sizeof(int);
        }

        if (token == &#39;,&#39;) {
            match(&#39;,&#39;);
        }
    }
    next();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;看了上面的代码，能大概理解吗？这里我们讲解其中的一些细节。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向前看标记&lt;/strong&gt; ：其中的 &lt;code&gt;if (token == xxx)&lt;/code&gt; 语句就是用来向前查看标记以确定使用哪一个产生式，例如只要遇到 &lt;code&gt;enum&lt;/code&gt; 我们就知道是需要解析枚举类型。而如果只解析到类型，如 &lt;code&gt;int identifier&lt;/code&gt; 时我们并不能确定 &lt;code&gt;identifier&lt;/code&gt; 是一个普通的变量还是一个函数，所以还需要继续查看后续的标记，如果遇到 &lt;code&gt;(&lt;/code&gt; 则可以断定是函数了，反之则是变量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变量类型的表示&lt;/strong&gt; ：我们的编译器支持指针类型，那意味着也支持指针的指针，如 &lt;code&gt;int **data;&lt;/code&gt;。那么我们如何表示指针类型呢？前文中我们定义了支持的类型：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;// types of variable/function
enum { CHAR, INT, PTR };&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;所以一个类型首先有基本类型，如 &lt;code&gt;CHAR&lt;/code&gt; 或 &lt;code&gt;INT&lt;/code&gt;，当它是一个指向基本类型的指针时，如 &lt;code&gt;int *data&lt;/code&gt;，我们就将它的类型加上 &lt;code&gt;PTR&lt;/code&gt; 即代码中的：&lt;code&gt;type = type + PTR;&lt;/code&gt;。同理，如果是指针的指针，则再加上 &lt;code&gt;PTR&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;enum-declaration&#34;&gt;enum_declaration()&lt;/h4&gt;
&lt;p&gt;用于解析枚举类型的定义。主要的逻辑用于解析用逗号（&lt;code&gt;,&lt;/code&gt;）分隔的变量，值得注意的是在编译器中如何保存枚举变量的信息。&lt;/p&gt;
&lt;p&gt;即我们将该变量的类别设置成了 &lt;code&gt;Num&lt;/code&gt;，这样它就成了全局的常量了，而注意到上节中，正常的全局变量的类别则是 &lt;code&gt;Glo&lt;/code&gt;，类别信息在后面章节中解析 &lt;code&gt;expression&lt;/code&gt; 会使用到。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;void enum_declaration() {
    // parse enum [id] { a = 1, b = 3, ...}
    int i;
    i = 0;
    while (token != &#39;}&#39;) {
        if (token != Id) {
            printf(&#34;%d: bad enum identifier %d\n&#34;, line, token);
            exit(-1);
        }
        next();
        if (token == Assign) {
            // like {a=10}
            next();
            if (token != Num) {
                printf(&#34;%d: bad enum initializer\n&#34;, line);
                exit(-1);
            }
            i = token_val;
            next();
        }

        current_id[Class] = Num;
        current_id[Type] = INT;
        current_id[Value] = i++;

        if (token == &#39;,&#39;) {
            next();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;其它-2&#34;&gt;其它&lt;/h4&gt;
&lt;p&gt;其中的 &lt;code&gt;function_declaration&lt;/code&gt; 函数我们将放到下一章中讲解。&lt;code&gt;match&lt;/code&gt; 函数是一个辅助函数：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;void match(int tk) {
    if (token == tk) {
        next();
    } else {
        printf(&#34;%d: expected token: %d\n&#34;, line, tk);
        exit(-1);
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;它将 &lt;code&gt;next&lt;/code&gt; 函数包装起来，如果不是预期的标记则报错并退出。&lt;/p&gt;
&lt;h3 id=&#34;代码-2&#34;&gt;代码&lt;/h3&gt;
&lt;p&gt;本章的代码可以在 &lt;a href=&#34;https://github.com/lotabout/write-a-C-interpreter/tree/step-3&#34;&gt;Github&lt;/a&gt; 上下载，也可以直接 clone&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone -b step-3 https://github.com/lotabout/write-a-C-interpreter&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;本章的代码还无法正常运行，因为还有许多功能没有实现，但如果有兴趣的话，可以自己先试着去实现它。&lt;/p&gt;
&lt;h3 id=&#34;小结-4&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;本章的内容应该不难，除了开头的 EBNF 表达式可能相对不好理解一些，但如果你查看了 EBNF 的具体表示方法后就不难理解了。&lt;/p&gt;
&lt;p&gt;剩下的内容就是按部就班地将 EBNF 的产生式转换成函数的过程，如果你理解了上一章中的内容，相信这部分也不难理解。&lt;/p&gt;
&lt;p&gt;下一章中我们将介绍如何解析函数的定义，敬请期待。&lt;/p&gt;
&lt;h2 id=&#34;函数定义&#34;&gt;函数定义&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;由于语法分析本身比较复杂，所以我们将它拆分成 3 个部分进行讲解，分别是：变量定义、函数定义、表达式。本章讲解函数定义相关的内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;EBNF-表示-2&#34;&gt;EBNF 表示&lt;/h3&gt;
&lt;p&gt;这是上一章的 EBNF 方法中与函数定义相关的内容。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;variable_decl ::= type {&#39;*&#39;} id { &#39;,&#39; {&#39;*&#39;} id } &#39;;&#39;

function_decl ::= type {&#39;*&#39;} id &#39;(&#39; parameter_decl &#39;)&#39; &#39;{&#39; body_decl &#39;}&#39;

parameter_decl ::= type {&#39;*&#39;} id {&#39;,&#39; type {&#39;*&#39;} id}

body_decl ::= {variable_decl}, {statement}

statement ::= non_empty_statement | empty_statement

non_empty_statement ::= if_statement | while_statement | &#39;{&#39; statement &#39;}&#39;
                     | &#39;return&#39; expression | expression &#39;;&#39;

if_statement ::= &#39;if&#39; &#39;(&#39; expression &#39;)&#39; statement [&#39;else&#39; non_empty_statement]

while_statement ::= &#39;while&#39; &#39;(&#39; expression &#39;)&#39; non_empty_statement&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;解析函数的定义&#34;&gt;解析函数的定义&lt;/h3&gt;
&lt;p&gt;上一章的代码中，我们已经知道了什么时候开始解析函数的定义，相关的代码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;...
if (token == &#39;(&#39;) {
    current_id[Class] = Fun;
    current_id[Value] = (int)(text + 1); // the memory address of function
    function_declaration();
} else {
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;即在这断代码之前，我们已经为当前的标识符（identifier）设置了正确的类型，上面这断代码为当前的标识符设置了正确的类别（Fun），以及该函数在代码段（text segment）中的位置。接下来开始解析函数定义相关的内容：&lt;code&gt;parameter_decl&lt;/code&gt; 及 &lt;code&gt;body_decl&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;函数参数与汇编代码&#34;&gt;函数参数与汇编代码&lt;/h4&gt;
&lt;p&gt;现在我们要回忆如何将“函数”转换成对应的汇编代码，因为这决定了在解析时我们需要哪些相关的信息。考虑下列函数：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;int demo(int param_a, int *param_b) {
    int local_1;
    char local_2;

    ...
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;那么它应该被转换成什么样的汇编代码呢？在思考这个问题之前，我们需要了解当 &lt;code&gt;demo&lt;/code&gt;函数被调用时，计算机的栈的状态，如下（参照第三章讲解的虚拟机）：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;|    ....       | high address
+---------------+
| arg: param_a  |    new_bp + 3
+---------------+
| arg: param_b  |    new_bp + 2
+---------------+
|return address |    new_bp + 1
+---------------+
| old BP        | &amp;lt;- new BP
+---------------+
| local_1       |    new_bp - 1
+---------------+
| local_2       |    new_bp - 2
+---------------+
|    ....       |  low address&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;这里最为重要的一点是，无论是函数的参数（如 &lt;code&gt;param_a&lt;/code&gt;）还是函数的局部变量（如 &lt;code&gt;local_1&lt;/code&gt;）都是存放在计算机的 &lt;strong&gt;栈&lt;/strong&gt; 上的。因此，与存放在 &lt;strong&gt;数据段&lt;/strong&gt; 中的全局变量不同，在函数内访问它们是通过 &lt;code&gt;new_bp&lt;/code&gt; 指针和对应的位移量进行的。因此，在解析的过程中，我们需要知道参数的个数，各个参数的位移量。&lt;/p&gt;
&lt;h4 id=&#34;函数定义的解析&#34;&gt;函数定义的解析&lt;/h4&gt;
&lt;p&gt;这相当于是整个函数定义的语法解析的框架，代码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;void function_declaration() {
    // type func_name (...) {...}
    //               | this part

    match(&#39;(&#39;);
    function_parameter();
    match(&#39;)&#39;);
    match(&#39;{&#39;);
    function_body();
    //match(&#39;}&#39;);                 //  ①

    // ②
    // unwind local variable declarations for all local variables.
    current_id = symbols;
    while (current_id[Token]) {
        if (current_id[Class] == Loc) {
            current_id[Class] = current_id[BClass];
            current_id[Type]  = current_id[BType];
            current_id[Value] = current_id[BValue];
        }
        current_id = current_id + IdSize;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;其中①中我们没有消耗最后的&lt;code&gt;}&lt;/code&gt;字符。这么做的原因是：&lt;code&gt;variable_decl&lt;/code&gt; 与 &lt;code&gt;function_decl&lt;/code&gt; 是放在一起解析的，而 &lt;code&gt;variable_decl&lt;/code&gt; 是以字符 &lt;code&gt;;&lt;/code&gt; 结束的。而 &lt;code&gt;function_decl&lt;/code&gt; 是以字符 &lt;code&gt;}&lt;/code&gt; 结束的，若在此通过 &lt;code&gt;match&lt;/code&gt; 消耗了 ‘;’ 字符，那么外层的 &lt;code&gt;while&lt;/code&gt; 循环就没法准确地知道函数定义已经结束。所以我们将结束符的解析放在了外层的 &lt;code&gt;while&lt;/code&gt; 循环中。&lt;/p&gt;
&lt;p&gt;而②中的代码是用于将符号表中的信息恢复成全局的信息。这是因为，局部变量是可以和全局变量同名的，一旦同名，在函数体内局部变量就会覆盖全局变量，出了函数体，全局变量就恢复了原先的作用。这段代码线性地遍历所有标识符，并将保存在 &lt;code&gt;BXXX&lt;/code&gt; 中的信息还原。&lt;/p&gt;
&lt;h4 id=&#34;解析参数&#34;&gt;解析参数&lt;/h4&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;parameter_decl ::= type {&#39;*&#39;} id {&#39;,&#39; type {&#39;*&#39;} id}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;解析函数的参数就是解析以逗号分隔的一个个标识符，同时记录它们的位置与类型。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;int index_of_bp; // index of bp pointer on stack

void function_parameter() {
    int type;
    int params;
    params = 0;
    while (token != &#39;)&#39;) {
        // ①

        // int name, ...
        type = INT;
        if (token == Int) {
            match(Int);
        } else if (token == Char) {
            type = CHAR;
            match(Char);
        }

        // pointer type
        while (token == Mul) {
            match(Mul);
            type = type + PTR;
        }

        // parameter name
        if (token != Id) {
            printf(&#34;%d: bad parameter declaration\n&#34;, line);
            exit(-1);
        }
        if (current_id[Class] == Loc) {
            printf(&#34;%d: duplicate parameter declaration\n&#34;, line);
            exit(-1);
        }

        match(Id);

        //②
        // store the local variable
        current_id[BClass] = current_id[Class]; current_id[Class]  = Loc;
        current_id[BType]  = current_id[Type];  current_id[Type]   = type;
        current_id[BValue] = current_id[Value]; current_id[Value]  = params++;   // index of current parameter

        if (token == &#39;,&#39;) {
            match(&#39;,&#39;);
        }
    }

    // ③
    index_of_bp = params+1;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;其中①与全局变量定义的解析十分一样，用于解析该参数的类型。&lt;/p&gt;
&lt;p&gt;而②则与上节中提到的“局部变量覆盖全局变量”相关，先将全局变量的信息保存（无论是是否真的在全局中用到了这个变量）在 &lt;code&gt;BXXX&lt;/code&gt; 中，再赋上局部变量相关的信息，如 &lt;code&gt;Value&lt;/code&gt; 中存放的是参数的位置（是第几个参数）。&lt;/p&gt;
&lt;p&gt;③则与汇编代码的生成有关，&lt;code&gt;index_of_bp&lt;/code&gt; 就是前文提到的 &lt;code&gt;new_bp&lt;/code&gt; 的位置。&lt;/p&gt;
&lt;h4 id=&#34;函数体的解析&#34;&gt;函数体的解析&lt;/h4&gt;
&lt;p&gt;我们实现的 C 语言与现代的 C 语言不太一致，我们需要所有的变量定义出现在所有的语句之前。函数体的代码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;void function_body() {
    // type func_name (...) {...}
    //                   --&amp;gt;|   |&amp;lt;--

    // ... {
    // 1. local declarations
    // 2. statements
    // }

    int pos_local; // position of local variables on the stack.
    int type;
    pos_local = index_of_bp;

    // ①
    while (token == Int || token == Char) {
        // local variable declaration, just like global ones.
        basetype = (token == Int) ? INT : CHAR;
        match(token);

        while (token != &#39;;&#39;) {
            type = basetype;
            while (token == Mul) {
                match(Mul);
                type = type + PTR;
            }

            if (token != Id) {
                // invalid declaration
                printf(&#34;%d: bad local declaration\n&#34;, line);
                exit(-1);
            }
            if (current_id[Class] == Loc) {
                // identifier exists
                printf(&#34;%d: duplicate local declaration\n&#34;, line);
                exit(-1);
            }
            match(Id);

            // store the local variable
            current_id[BClass] = current_id[Class]; current_id[Class]  = Loc;
            current_id[BType]  = current_id[Type];  current_id[Type]   = type;
            current_id[BValue] = current_id[Value]; current_id[Value]  = ++pos_local;   // index of current parameter

            if (token == &#39;,&#39;) {
                match(&#39;,&#39;);
            }
        }
        match(&#39;;&#39;);
    }

    // ②
    // save the stack size for local variables
    *++text = ENT;
    *++text = pos_local - index_of_bp;

    // statements
    while (token != &#39;}&#39;) {
        statement();
    }

    // emit code for leaving the sub function
    *++text = LEV;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;其中①用于解析函数体内的局部变量的定义，代码与全局的变量定义几乎一样。&lt;/p&gt;
&lt;p&gt;而②则用于生成汇编代码，我们在第三章的虚拟机中提到过，我们需要在栈上为局部变量预留空间，这两行代码起的就是这个作用。&lt;/p&gt;
&lt;h3 id=&#34;代码-3&#34;&gt;代码&lt;/h3&gt;
&lt;p&gt;本章的代码可以在 &lt;a href=&#34;https://github.com/lotabout/write-a-C-interpreter/tree/step-4&#34;&gt;Github&lt;/a&gt; 上下载，也可以直接 clone&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone -b step-4 https://github.com/lotabout/write-a-C-interpreter&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;本章的代码依旧无法运行，还有两个重要函数没有完成：&lt;code&gt;statement&lt;/code&gt; 及 &lt;code&gt;expression&lt;/code&gt;，感兴趣的话可以尝试自己实现它们。&lt;/p&gt;
&lt;h3 id=&#34;小结-5&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;本章中我们用了不多的代码完成了函数定义的解析。大部分的代码依旧是用于解析变量：参数和局部变量，而它们的逻辑和全局变量的解析几乎一致，最大的区别就是保存的信息不同。&lt;/p&gt;
&lt;p&gt;当然，要理解函数定义的解析过程，最重要的是理解我们会为函数生成怎样的汇编代码，因为这决定了我们需要从解析中获取什么样的信息（例如参数的位置，个数等），而这些可能需要你重新回顾一下“虚拟机”这一章，或是重新学习学习汇编相关的知识。&lt;/p&gt;
&lt;p&gt;下一章中我们将讲解语句的解析，敬请期待。&lt;/p&gt;
&lt;h2 id=&#34;语句&#34;&gt;语句&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;整个编译器还剩下最后两个部分：语句和表达式的解析。它们的内容比较多，主要涉及如何将语句和表达式编译成汇编代码。这章讲解语句的解析，相对于表达式来说它还是较为容易的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;语句-2&#34;&gt;语句&lt;/h3&gt;
&lt;p&gt;C 语言区分“语句”（statement）和“表达式”（expression）两个概念。简单地说，可以认为语句就是表达式加上末尾的分号。&lt;/p&gt;
&lt;p&gt;在我们的编译器中共识别 6 种语句：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;if (...) &amp;lt;statement&amp;gt; [else &amp;lt;statement&amp;gt;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while (...) &amp;lt;statement&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ &amp;lt;statement&amp;gt; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return xxx;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;empty statement&amp;gt;&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expression;&lt;/code&gt; (expression end with semicolon)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;它们的语法分析都相对容易，重要的是去理解如何将这些语句编译成汇编代码，下面我们逐一解释。&lt;/p&gt;
&lt;h4 id=&#34;IF-语句&#34;&gt;IF 语句&lt;/h4&gt;
&lt;p&gt;IF 语句的作用是跳转，跟据条件表达式决定跳转的位置。我们看看下面的伪代码：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;if (...) &amp;lt;statement&amp;gt; [else &amp;lt;statement&amp;gt;]

  if (&amp;lt;cond&amp;gt;)                   &amp;lt;cond&amp;gt;
                                JZ a
    &amp;lt;true_statement&amp;gt;   ===&amp;gt;     &amp;lt;true_statement&amp;gt;
  else:                         JMP b
a:                           a:
    &amp;lt;false_statement&amp;gt;           &amp;lt;false_statement&amp;gt;
b:                           b:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;对应的汇编代码流程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行条件表达式 &lt;code&gt;&amp;lt;cond&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果条件失败，则跳转到 &lt;code&gt;a&lt;/code&gt; 的位置，执行 &lt;code&gt;else&lt;/code&gt; 语句。这里 &lt;code&gt;else&lt;/code&gt; 语句是可以省略的，此时 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 都指向 IF 语句后方的代码。&lt;/li&gt;
&lt;li&gt;因为汇编代码是顺序排列的，所以如果执行了 &lt;code&gt;true_statement&lt;/code&gt;，为了防止因为顺序排列而执行了 &lt;code&gt;false_statement&lt;/code&gt;，所以需要无条件跳转 &lt;code&gt;JMP b&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对应的 C 代码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;if (token == If) {
    match(If);
    match(&#39;(&#39;);
    expression(Assign);  // parse condition
    match(&#39;)&#39;);

    *++text = JZ;
    b = ++text;

    statement();         // parse statement
    if (token == Else) { // parse else
        match(Else);

        // emit code for JMP B
        *b = (int)(text + 3);
        *++text = JMP;
        b = ++text;

        statement();
    }

    *b = (int)(text + 1);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;While-语句&#34;&gt;While 语句&lt;/h4&gt;
&lt;p&gt;While 语句比 If 语句简单，它对应的汇编代码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;a:                     a:
   while (&amp;lt;cond&amp;gt;)        &amp;lt;cond&amp;gt;
                         JZ b
    &amp;lt;statement&amp;gt;          &amp;lt;statement&amp;gt;
                         JMP a
b:                     b:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;没有什么值得说明的内容，它的 C 代码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == While) {
    match(While);

    a = text + 1;

    match(&#39;(&#39;);
    expression(Assign);
    match(&#39;)&#39;);

    *++text = JZ;
    b = ++text;

    statement();

    *++text = JMP;
    *++text = (int)a;
    *b = (int)(text + 1);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;Return-语句&#34;&gt;Return 语句&lt;/h4&gt;
&lt;p&gt;Return 唯一特殊的地方是：一旦遇到了 Return 语句，则意味着函数要退出了，所以需要生成汇编代码 &lt;code&gt;LEV&lt;/code&gt; 来表示退出。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == Return) {
    // return [expression];
    match(Return);

    if (token != &#39;;&#39;) {
        expression(Assign);
    }

    match(&#39;;&#39;);

    // emit code for return
    *++text = LEV;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;其它语句&#34;&gt;其它语句&lt;/h4&gt;
&lt;p&gt;其它语句并不直接生成汇编代码，所以不多做说明，代码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == &#39;{&#39;) {
    // { &amp;lt;statement&amp;gt; ... }
    match(&#39;{&#39;);

    while (token != &#39;}&#39;) {
        statement();
    }

    match(&#39;}&#39;);
}
else if (token == &#39;;&#39;) {
    // empty statement
    match(&#39;;&#39;);
}
else {
    // a = b; or function_call();
    expression(Assign);
    match(&#39;;&#39;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;代码-4&#34;&gt;代码&lt;/h3&gt;
&lt;p&gt;本章的代码可以在 &lt;a href=&#34;https://github.com/lotabout/write-a-C-interpreter/tree/step-5&#34;&gt;Github&lt;/a&gt; 上下载，也可以直接 clone&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone -b step-5 https://github.com/lotabout/write-a-C-interpreter&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;本章的代码依旧无法运行，还剩最后一部分没有完成：&lt;code&gt;expression&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;小结-6&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;本章讲解了如何将语句编译成汇编代码，内容相对容易一些，关键就是去理解汇编代码的执行原理。&lt;/p&gt;
&lt;p&gt;同时值得一提的是，编译器的语法分析部分其实是很简单的，而真正的难点是如何在语法分析时收集足够多的信息，最终把源代码转换成目标代码（汇编）。我认为这也是初学者实现编译器的一大难点，往往比词法分析/语法分析更困难。&lt;/p&gt;
&lt;p&gt;所以建议如果没有学过汇编，可以学习学习，它本身不难，但对理解计算机的原理有很大帮助。&lt;/p&gt;
&lt;h2 id=&#34;表达式&#34;&gt;表达式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这是整个编译器的最后一部分，解析表达式。什么是表达式？表达式是将各种语言要素的一个组合，用来求值。例如：函数调用、变量赋值、运算符运算等等。&lt;/p&gt;
&lt;p&gt;表达式的解析难点有二：一是运算符的优先级问题，二是如何将表达式编译成目标代码。我们就来逐一说明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;运算符的优先级&#34;&gt;运算符的优先级&lt;/h3&gt;
&lt;p&gt;运算符的优先级决定了表达式的运算顺序，如在普通的四则运算中，乘法 &lt;code&gt;*&lt;/code&gt; 优先级高于加法 &lt;code&gt;+&lt;/code&gt;，这就意味着表达式 &lt;code&gt;2 + 3 * 4&lt;/code&gt; 的实际运行顺序是 &lt;code&gt;2 + (3 * 4)&lt;/code&gt; 而不是 &lt;code&gt;(2 + 3) * 4&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;C 语言定义了各种表达式的优先级，可以参考 &lt;a href=&#34;http://en.cppreference.com/w/c/language/operator_precedence&#34;&gt;C 语言运算符优先级&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;传统的编程书籍会用“逆波兰式”实现四则运算来讲解优先级问题。实际上，优先级关心的就是哪个运算符先计算，哪个运算符后计算（毕竟叫做“优先级”嘛）。而这就意味着我们需要决定先为哪个运算符生成目标代码（汇编），因为汇编代码是顺序排列的，我们必须先计算优先级高的运算符。&lt;/p&gt;
&lt;p&gt;那么如何确定运算符的优先级呢？答曰：栈（递归调用的实质也是栈的处理）。&lt;/p&gt;
&lt;p&gt;举一个例子：&lt;code&gt;2 + 3 - 4 * 5&lt;/code&gt;，它的运算顺序是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将 &lt;code&gt;2&lt;/code&gt; 入栈&lt;/li&gt;
&lt;li&gt;遇到运算符 &lt;code&gt;+&lt;/code&gt;，入栈，此时我们期待的是&lt;code&gt;+&lt;/code&gt;的另一个参数&lt;/li&gt;
&lt;li&gt;遇到数字 &lt;code&gt;3&lt;/code&gt;，原则上我们需要立即计算 &lt;code&gt;2+3&lt;/code&gt;的值，但我们不确定数字 &lt;code&gt;3&lt;/code&gt; 是否属于优先级更高的运算符，所以先将它入栈。&lt;/li&gt;
&lt;li&gt;遇到运算符 &lt;code&gt;-&lt;/code&gt;，它的优先级和 &lt;code&gt;+&lt;/code&gt; 相同，此时判断参数 &lt;code&gt;3&lt;/code&gt; 属于这前的 &lt;code&gt;+&lt;/code&gt;。将运算符 &lt;code&gt;+&lt;/code&gt; 出栈，并将之前的 &lt;code&gt;2&lt;/code&gt; 和 &lt;code&gt;3&lt;/code&gt; 出栈，计算 &lt;code&gt;2+3&lt;/code&gt; 的结果，得到 &lt;code&gt;5&lt;/code&gt; 入栈。同时将运算符 &lt;code&gt;-&lt;/code&gt; 入栈。&lt;/li&gt;
&lt;li&gt;遇到数字&lt;code&gt;4&lt;/code&gt;，同样不能确定是否能立即计算，入栈&lt;/li&gt;
&lt;li&gt;遇到运算符 &lt;code&gt;*&lt;/code&gt; 优先级大于 &lt;code&gt;-&lt;/code&gt;，入栈&lt;/li&gt;
&lt;li&gt;遇到数字&lt;code&gt;5&lt;/code&gt;，依旧不能确定是否立即计算，入栈&lt;/li&gt;
&lt;li&gt;表达式结束，运算符出栈，为 &lt;code&gt;*&lt;/code&gt;，将参数出栈，计算 &lt;code&gt;4*5&lt;/code&gt; 得到结果 &lt;code&gt;20&lt;/code&gt; 入栈。&lt;/li&gt;
&lt;li&gt;运算符出栈，为 &lt;code&gt;-&lt;/code&gt;，将参数出栈，计算 &lt;code&gt;5-20&lt;/code&gt;，得到 &lt;code&gt;-15&lt;/code&gt; 入栈。&lt;/li&gt;
&lt;li&gt;此时运算符栈为空，因此得到结果 &lt;code&gt;-15&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;// after step 1, 2
|      |
+------+
| 3    |   |      |
+------+   +------+
| 2    |   | +    |
+------+   +------+

// after step 4
|      |   |      |
+------+   +------+
| 5    |   | -    |
+------+   +------+

// after step 7
|      |
+------+
| 5    |
+------+   +------+
| 4    |   | *    |
+------+   +------+
| 5    |   | -    |
+------+   +------+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;综上，在计算一个运算符‘x’之前，必须先查看它的右方，找出并计算所有优先级大于‘x’的运算符，之后再计算运算符‘x’。&lt;/p&gt;
&lt;p&gt;最后注意的是优先通常只与多元运算符相关，单元运算符往往没有这个问题（因为只有一个参数）。也可以认为“优先级”的实质就是两个运算符在抢参数。&lt;/p&gt;
&lt;h3 id=&#34;一元运算符&#34;&gt;一元运算符&lt;/h3&gt;
&lt;p&gt;上节中说到了运算符的优先级，也提到了优先级一般只与多元运算符有关，这也意味着一元运算符的优先级总是高于多元运算符。因为我们需要先对它们进行解析。&lt;/p&gt;
&lt;p&gt;当然，这部分也将同时解析参数本身（如变量、数字、字符串等等）。&lt;/p&gt;
&lt;p&gt;关于表达式的解析，与语法分析相关的部分就是上文所说的优先级问题了，而剩下的较难较烦的部分是与目标代码的生成有关的。因此对于需要讲解的运算符，我们主要从它的目标代码入手。&lt;/p&gt;
&lt;h4 id=&#34;常量&#34;&gt;常量&lt;/h4&gt;
&lt;p&gt;首先是数字，用 &lt;code&gt;IMM&lt;/code&gt; 指令将它加载到 &lt;code&gt;AX&lt;/code&gt; 中即可：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;if (token == Num) {
    match(Num);

    // emit code
    *++text = IMM;
    *++text = token_val;
    expr_type = INT;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;接着是字符串常量。它比较特殊的一点是 C 语言的字符串常量支持如下风格：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;char *p;
p = &#34;first line&#34;
    &#34;second line&#34;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;即跨行的字符串拼接，它相当于：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;char *p;
p = &#34;first linesecond line&#34;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;所以解析的时候要注意这一点：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == &#39;&#34;&#39;) {
    // emit code
    *++text = IMM;
    *++text = token_val;

    match(&#39;&#34;&#39;);
    // store the rest strings
    while (token == &#39;&#34;&#39;) {
        match(&#39;&#34;&#39;);
    }

    // append the end of string character &#39;\0&#39;, all the data are default
    // to 0, so just move data one position forward.
    data = (char *)(((int)data + sizeof(int)) &amp;amp; (-sizeof(int)));
    expr_type = PTR;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;sizeof&#34;&gt;sizeof&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sizeof&lt;/code&gt; 是一个一元运算符，我们需要知道后面参数的类型，类型的解析在前面的文章中我们已经很熟悉了。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == Sizeof) {
    // sizeof is actually an unary operator
    // now only `sizeof(int)`, `sizeof(char)` and `sizeof(*...)` are
    // supported.
    match(Sizeof);
    match(&#39;(&#39;);
    expr_type = INT;

    if (token == Int) {
        match(Int);
    } else if (token == Char) {
        match(Char);
        expr_type = CHAR;
    }

    while (token == Mul) {
        match(Mul);
        expr_type = expr_type + PTR;
    }

    match(&#39;)&#39;);

    // emit code
    *++text = IMM;
    *++text = (expr_type == CHAR) ? sizeof(char) : sizeof(int);

    expr_type = INT;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;注意的是只支持 &lt;code&gt;sizeof(int)&lt;/code&gt;，&lt;code&gt;sizeof(char)&lt;/code&gt; 及 &lt;code&gt;sizeof(pointer type...)&lt;/code&gt;。并且它的结果是 &lt;code&gt;int&lt;/code&gt; 型。&lt;/p&gt;
&lt;h4 id=&#34;变量与函数调用&#34;&gt;变量与函数调用&lt;/h4&gt;
&lt;p&gt;由于取变量的值与函数的调用都是以 &lt;code&gt;Id&lt;/code&gt; 标记开头的，因此将它们放在一起处理。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == Id) {
    // there are several type when occurs to Id
    // but this is unit, so it can only be
    // 1. function call
    // 2. Enum variable
    // 3. global/local variable
    match(Id);

    id = current_id;

    if (token == &#39;(&#39;) {
        // function call
        match(&#39;(&#39;);

        // ①
        // pass in arguments
        tmp = 0; // number of arguments
        while (token != &#39;)&#39;) {
            expression(Assign);
            *++text = PUSH;
            tmp ++;

            if (token == &#39;,&#39;) {
                match(&#39;,&#39;);
            }
        }
        match(&#39;)&#39;);

        // ②
        // emit code
        if (id[Class] == Sys) {
            // system functions
            *++text = id[Value];
        }
        else if (id[Class] == Fun) {
            // function call
            *++text = CALL;
            *++text = id[Value];
        }
        else {
            printf(&#34;%d: bad function call\n&#34;, line);
            exit(-1);
        }

        // ③
        // clean the stack for arguments
        if (tmp &amp;gt; 0) {
            *++text = ADJ;
            *++text = tmp;
        }
        expr_type = id[Type];
    }
    else if (id[Class] == Num) {
        // ④
        // enum variable
        *++text = IMM;
        *++text = id[Value];
        expr_type = INT;
    }
    else {
        // ⑤
        // variable
        if (id[Class] == Loc) {
            *++text = LEA;
            *++text = index_of_bp - id[Value];
        }
        else if (id[Class] == Glo) {
            *++text = IMM;
            *++text = id[Value];
        }
        else {
            printf(&#34;%d: undefined variable\n&#34;, line);
            exit(-1);
        }

        //⑥
        // emit code, default behaviour is to load the value of the
        // address which is stored in `ax`
        expr_type = id[Type];
        *++text = (expr_type == Char) ? LC : LI;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;①中注意我们是顺序将参数入栈，这和第三章：虚拟机中讲解的指令是对应的。与之不同，标准 C 是逆序将参数入栈的。&lt;/p&gt;
&lt;p&gt;②中判断函数的类型，同样在第三章：“虚拟机”中我们介绍过内置函数的支持，如 &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;malloc&lt;/code&gt; 等等。内置函数有对应的汇编指令，而普通的函数则编译成 &lt;code&gt;CALL &amp;lt;addr&amp;gt;&lt;/code&gt; 的形式。&lt;/p&gt;
&lt;p&gt;③用于清除入栈的参数。因为我们不在乎出栈的值，所以直接修改栈指针的大小即可。&lt;/p&gt;
&lt;p&gt;④：当该标识符是全局定义的枚举类型时，直接将对应的值用 &lt;code&gt;IMM&lt;/code&gt; 指令存入 &lt;code&gt;AX&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;⑤则是用于加载变量的值，如果是局部变量则采用与 &lt;code&gt;bp&lt;/code&gt; 指针相对位置的形式（参见第 7章函数定义）。而如果是全局变量则用 &lt;code&gt;IMM&lt;/code&gt; 加载变量的地址。&lt;/p&gt;
&lt;p&gt;⑥：无论是全局还是局部变量，最终都根据它们的类型用 &lt;code&gt;LC&lt;/code&gt; 或 &lt;code&gt;LI&lt;/code&gt; 指令加载对应的值。&lt;/p&gt;
&lt;p&gt;关于变量，你可能有疑问，如果遇到标识符就用 &lt;code&gt;LC/LI&lt;/code&gt; 载入相应的值，那诸如 &lt;code&gt;a[10]&lt;/code&gt; 之类的表达式要如何实现呢？后面我们会看到，根据标识符后的运算符，我们可能会修改或删除现有的 &lt;code&gt;LC/LI&lt;/code&gt; 指令。&lt;/p&gt;
&lt;h4 id=&#34;强制转换&#34;&gt;强制转换&lt;/h4&gt;
&lt;p&gt;虽然我们前面没有提到，但我们一直用 &lt;code&gt;expr_type&lt;/code&gt; 来保存一个表达式的类型，强制转换的作用是获取转换的类型，并直接修改 &lt;code&gt;expr_type&lt;/code&gt; 的值。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == &#39;(&#39;) {
    // cast or parenthesis
    match(&#39;(&#39;);
    if (token == Int || token == Char) {
        tmp = (token == Char) ? CHAR : INT; // cast type
        match(token);
        while (token == Mul) {
            match(Mul);
            tmp = tmp + PTR;
        }

        match(&#39;)&#39;);

        expression(Inc); // cast has precedence as Inc(++)

        expr_type  = tmp;
    } else {
        // normal parenthesis
        expression(Assign);
        match(&#39;)&#39;);
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;指针取值&#34;&gt;指针取值&lt;/h4&gt;
&lt;p&gt;诸如 &lt;code&gt;*a&lt;/code&gt; 的指针取值，关键是判断 &lt;code&gt;a&lt;/code&gt; 的类型，而就像上节中提到的，当一个表达式解析结束时，它的类型保存在变量 &lt;code&gt;expr_type&lt;/code&gt; 中。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == Mul) {
    // dereference *&amp;lt;addr&amp;gt;
    match(Mul);
    expression(Inc); // dereference has the same precedence as Inc(++)

    if (expr_type &amp;gt;= PTR) {
        expr_type = expr_type - PTR;
    } else {
        printf(&#34;%d: bad dereference\n&#34;, line);
        exit(-1);
    }

    *++text = (expr_type == CHAR) ? LC : LI;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;取址操作&#34;&gt;取址操作&lt;/h4&gt;
&lt;p&gt;这里我们就能看到“变量与函数调用”一节中所说的修改或删除 &lt;code&gt;LC/LI&lt;/code&gt; 指令了。前文中我们说到，对于变量，我们会先加载它的地址，并根据它们类型使用 &lt;code&gt;LC/LI&lt;/code&gt; 指令加载实际内容，例如对变量 &lt;code&gt;a&lt;/code&gt;：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;IMM &amp;lt;addr&amp;gt;
LI&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;那么对变量 &lt;code&gt;a&lt;/code&gt; 取址，其实只要不执行 &lt;code&gt;LC/LI&lt;/code&gt; 即可。因此我们删除相应的指令。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == And) {
    // get the address of
    match(And);
    expression(Inc); // get the address of
    if (*text == LC || *text == LI) {
        text --;
    } else {
        printf(&#34;%d: bad address of\n&#34;, line);
        exit(-1);
    }

    expr_type = expr_type + PTR;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;逻辑取反&#34;&gt;逻辑取反&lt;/h4&gt;
&lt;p&gt;我们没有直接的逻辑取反指令，因此我们判断它是否与数字 0 相等。而数字 0 代表了逻辑 “False”。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == &#39;!&#39;) {
    // not
    match(&#39;!&#39;);
    expression(Inc);

    // emit code, use &amp;lt;expr&amp;gt; == 0
    *++text = PUSH;
    *++text = IMM;
    *++text = 0;
    *++text = EQ;

    expr_type = INT;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;按位取反&#34;&gt;按位取反&lt;/h4&gt;
&lt;p&gt;同样我们没有相应的指令，所以我们用异或来实现，即 &lt;code&gt;~a = a ^ 0xFFFF&lt;/code&gt;。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == &#39;~&#39;) {
    // bitwise not
    match(&#39;~&#39;);
    expression(Inc);

    // emit code, use &amp;lt;expr&amp;gt; XOR -1
    *++text = PUSH;
    *++text = IMM;
    *++text = -1;
    *++text = XOR;

    expr_type = INT;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;正负号&#34;&gt;正负号&lt;/h4&gt;
&lt;p&gt;注意这里并不是四则运算中的加减法，而是单个数字的取正取负操作。同样，我们没有取负的操作，用 &lt;code&gt;0 - x&lt;/code&gt; 来实现 &lt;code&gt;-x&lt;/code&gt;。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == Add) {
    // +var, do nothing
    match(Add);
    expression(Inc);

    expr_type = INT;
}
else if (token == Sub) {
    // -var
    match(Sub);

    if (token == Num) {
        *++text = IMM;
        *++text = -token_val;
        match(Num);
    } else {

        *++text = IMM;
        *++text = -1;
        *++text = PUSH;
        expression(Inc);
        *++text = MUL;
    }

    expr_type = INT;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;自增自减&#34;&gt;自增自减&lt;/h4&gt;
&lt;p&gt;注意的是自增自减操作的优先级是和它的位置有关的。如 &lt;code&gt;++p&lt;/code&gt; 的优先级高于 &lt;code&gt;p++&lt;/code&gt;，这里我们解析的就是类似 &lt;code&gt;++p&lt;/code&gt; 的操作。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == Inc || token == Dec) {
    tmp = token;
    match(token);
    expression(Inc);
    // ①
    if (*text == LC) {
        *text = PUSH;  // to duplicate the address
        *++text = LC;
    } else if (*text == LI) {
        *text = PUSH;
        *++text = LI;
    } else {
        printf(&#34;%d: bad lvalue of pre-increment\n&#34;, line);
        exit(-1);
    }
    *++text = PUSH;
    *++text = IMM;
    // ②
    *++text = (expr_type &amp;gt; PTR) ? sizeof(int) : sizeof(char);
    *++text = (tmp == Inc) ? ADD : SUB;
    *++text = (expr_type == CHAR) ? SC : SI;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;对应的汇编代码也比较直观，只是在实现 &lt;code&gt;++p&lt;/code&gt;时，我们要使用变量 &lt;code&gt;p&lt;/code&gt; 的地址两次，所以我们需要先 &lt;code&gt;PUSH&lt;/code&gt; （①）。&lt;/p&gt;
&lt;p&gt;②则是因为自增自减操作还需要处理是指针的情形。&lt;/p&gt;
&lt;h3 id=&#34;二元运算符&#34;&gt;二元运算符&lt;/h3&gt;
&lt;p&gt;这里，我们需要处理多运算符的优先级问题，就如前文的“优先级”一节提到的，我们需要不断地向右扫描，直到遇到优先级 &lt;strong&gt;小于&lt;/strong&gt; 当前优先级的运算符。&lt;/p&gt;
&lt;p&gt;回想起我们之前定义过的各个标记，它们是以优先级从低到高排列的，即 &lt;code&gt;Assign&lt;/code&gt; 的优先级最低，而 &lt;code&gt;Brak&lt;/code&gt;（&lt;code&gt;[&lt;/code&gt;） 的优先级最高。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;enum {
  Num = 128, Fun, Sys, Glo, Loc, Id,
  Char, Else, Enum, If, Int, Return, Sizeof, While,
  Assign, Cond, Lor, Lan, Or, Xor, And, Eq, Ne, Lt, Gt, Le, Ge, Shl, Shr, Add, Sub, Mul, Div, Mod, Inc, Dec, Brak
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;所以，当我们调用 &lt;code&gt;expression(level)&lt;/code&gt; 进行解析的时候，我们其实通过了参数 &lt;code&gt;level&lt;/code&gt; 指定了当前的优先级。在前文的一元运算符处理中也用到了这一点。&lt;/p&gt;
&lt;p&gt;所以，此时的二元运算符的解析的框架为：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;while (token &amp;gt;= level) {
    // parse token for binary operator and postfix operator
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;解决了优先级的问题，让我们继续讲解如何把运算符编译成汇编代码吧。&lt;/p&gt;
&lt;h4 id=&#34;赋值操作&#34;&gt;赋值操作&lt;/h4&gt;
&lt;p&gt;赋值操作是优先级最低的运算符。考虑诸如 &lt;code&gt;a = (expession)&lt;/code&gt; 的表达式，在解析 &lt;code&gt;=&lt;/code&gt; 之前，我们已经为变量 &lt;code&gt;a&lt;/code&gt; 生成了如下的汇编代码：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-assembly&#34; data-language=&#34;assembly&#34;&gt;&lt;code class=&#34;language-assembly&#34;&gt;IMM &amp;lt;addr&amp;gt;
LC/LI&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;当解析完&lt;code&gt;=&lt;/code&gt;右边的表达式后，相应的值会存放在 &lt;code&gt;ax&lt;/code&gt; 中，此时，为了实际将这个值保存起来，我们需要类似下面的汇编代码：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-assembly&#34; data-language=&#34;assembly&#34;&gt;&lt;code class=&#34;language-assembly&#34;&gt;IMM &amp;lt;addr&amp;gt;
PUSH
SC/SI&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;明白了这点，也就能理解下面的源代码了：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;tmp = expr_type;
if (token == Assign) {
    // var = expr;
    match(Assign);
    if (*text == LC || *text == LI) {
        *text = PUSH; // save the lvalue&#39;s pointer
    } else {
        printf(&#34;%d: bad lvalue in assignment\n&#34;, line);
        exit(-1);
    }
    expression(Assign);

    expr_type = tmp;
    *++text = (expr_type == CHAR) ? SC : SI;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;三目运算符&#34;&gt;三目运算符&lt;/h4&gt;
&lt;p&gt;这是 C 语言中唯一的一个三元运算符： &lt;code&gt;? :&lt;/code&gt;，它相当于一个小型的 If 语句，所以生成的代码也类似于 If 语句，这里就不多作解释。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == Cond) {
    // expr ? a : b;
    match(Cond);
    *++text = JZ;
    addr = ++text;
    expression(Assign);
    if (token == &#39;:&#39;) {
        match(&#39;:&#39;);
    } else {
        printf(&#34;%d: missing colon in conditional\n&#34;, line);
        exit(-1);
    }
    *addr = (int)(text + 3);
    *++text = JMP;
    addr = ++text;
    expression(Cond);
    *addr = (int)(text + 1);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;逻辑运算符&#34;&gt;逻辑运算符&lt;/h4&gt;
&lt;p&gt;这包括 &lt;code&gt;||&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;。它们对应的汇编代码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;&amp;lt;expr1&amp;gt; || &amp;lt;expr2&amp;gt;     &amp;lt;expr1&amp;gt; &amp;amp;&amp;amp; &amp;lt;expr2&amp;gt;

  ...&amp;lt;expr1&amp;gt;...          ...&amp;lt;expr1&amp;gt;...
  JNZ b                  JZ b
  ...&amp;lt;expr2&amp;gt;...          ...&amp;lt;expr2&amp;gt;...
b:                     b:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;所以源码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == Lor) {
    // logic or
    match(Lor);
    *++text = JNZ;
    addr = ++text;
    expression(Lan);
    *addr = (int)(text + 1);
    expr_type = INT;
}
else if (token == Lan) {
    // logic and
    match(Lan);
    *++text = JZ;
    addr = ++text;
    expression(Or);
    *addr = (int)(text + 1);
    expr_type = INT;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;数学运算符&#34;&gt;数学运算符&lt;/h4&gt;
&lt;p&gt;它们包括 &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt; &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;。它们的实现都很类似，我们以异或 &lt;code&gt;^&lt;/code&gt; 为例：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-assembly&#34; data-language=&#34;assembly&#34;&gt;&lt;code class=&#34;language-assembly&#34;&gt;&amp;lt;expr1&amp;gt; ^ &amp;lt;expr2&amp;gt;

...&amp;lt;expr1&amp;gt;...          &amp;lt;- now the result is on ax
PUSH
...&amp;lt;expr2&amp;gt;...          &amp;lt;- now the value of &amp;lt;expr2&amp;gt; is on ax
XOR&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;所以它对应的代码为：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == Xor) {
    // bitwise xor
    match(Xor);
    *++text = PUSH;
    expression(And);
    *++text = XOR;
    expr_type = INT;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;其它的我们便不再详述。但这当中还有一个问题，就是指针的加减。在 C 语言中，指针加上数值等于将指针移位，且根据不同的类型移动的位移不同。如 &lt;code&gt;a + 1&lt;/code&gt;，如果 &lt;code&gt;a&lt;/code&gt; 是 &lt;code&gt;char *&lt;/code&gt; 型，则移动一字节，而如果 &lt;code&gt;a&lt;/code&gt; 是 &lt;code&gt;int *&lt;/code&gt; 型，则移动 4 个字节（32位系统）。&lt;/p&gt;
&lt;p&gt;另外，在作指针减法时，如果是两个指针相减（相同类型），则结果是两个指针间隔的元素个数。因此要有特殊的处理。&lt;/p&gt;
&lt;p&gt;下面以加法为例，对应的汇编代码为：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-assembly&#34; data-language=&#34;assembly&#34;&gt;&lt;code class=&#34;language-assembly&#34;&gt;&amp;lt;expr1&amp;gt; + &amp;lt;expr2&amp;gt;

normal         pointer

&amp;lt;expr1&amp;gt;        &amp;lt;expr1&amp;gt;
PUSH           PUSH
&amp;lt;expr2&amp;gt;        &amp;lt;expr2&amp;gt;     |
ADD            PUSH        | &amp;lt;expr2&amp;gt; * &amp;lt;unit&amp;gt;
               IMM &amp;lt;unit&amp;gt;  |
               MUL         |
               ADD&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;即当 &lt;code&gt;&amp;lt;expr1&amp;gt;&lt;/code&gt; 是指针时，要根据它的类型放大 &lt;code&gt;&amp;lt;expr2&amp;gt;&lt;/code&gt; 的值，因此对应的源码如下：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == Add) {
    // add
    match(Add);
    *++text = PUSH;
    expression(Mul);

    expr_type = tmp;
    if (expr_type &amp;gt; PTR) {
        // pointer type, and not `char *`
        *++text = PUSH;
        *++text = IMM;
        *++text = sizeof(int);
        *++text = MUL;
    }
    *++text = ADD;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;相应的减法的代码就不贴了，可以自己实现看看，也可以看文末给出的链接。&lt;/p&gt;
&lt;h4 id=&#34;自增自减-2&#34;&gt;自增自减&lt;/h4&gt;
&lt;p&gt;这次是后缀形式的，即 &lt;code&gt;p++&lt;/code&gt; 或 &lt;code&gt;p--&lt;/code&gt;。与前缀形式不同的是，在执行自增自减后， &lt;code&gt;ax&lt;/code&gt;上需要保留原来的值。所以我们首先执行类似前缀自增自减的操作，再将 &lt;code&gt;ax&lt;/code&gt; 中的值执行减/增的操作。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;// 前缀形式 生成汇编代码
*++text = PUSH;
*++text = IMM;
*++text = (expr_type &amp;gt; PTR) ? sizeof(int) : sizeof(char);
*++text = (tmp == Inc) ? ADD : SUB;
*++text = (expr_type == CHAR) ? SC : SI;

// 后缀形式 生成汇编代码
*++text = PUSH;
*++text = IMM;
*++text = (expr_type &amp;gt; PTR) ? sizeof(int) : sizeof(char);
*++text = (token == Inc) ? ADD : SUB;
*++text = (expr_type == CHAR) ? SC : SI;
*++text = PUSH;                                             //
*++text = IMM;                                              // 执行相反的增/减操作
*++text = (expr_type &amp;gt; PTR) ? sizeof(int) : sizeof(char);   //
*++text = (token == Inc) ? SUB : ADD;                       //&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h4 id=&#34;数组取值操作&#34;&gt;数组取值操作&lt;/h4&gt;
&lt;p&gt;在学习 C 语言的时候你可能已经知道了，诸如 &lt;code&gt;a[10]&lt;/code&gt; 的操作等价于 &lt;code&gt;*(a + 10)&lt;/code&gt;。因此我们要做的就是生成类似的汇编代码：&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;else if (token == Brak) {
    // array access var[xx]
    match(Brak);
    *++text = PUSH;
    expression(Assign);
    match(&#39;]&#39;);

    if (tmp &amp;gt; PTR) {
        // pointer, `not char *`
        *++text = PUSH;
        *++text = IMM;
        *++text = sizeof(int);
        *++text = MUL;
    }
    else if (tmp &amp;lt; PTR) {
        printf(&#34;%d: pointer type expected\n&#34;, line);
        exit(-1);
    }
    expr_type = tmp - PTR;
    *++text = ADD;
    *++text = (expr_type == CHAR) ? LC : LI;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;h3 id=&#34;代码-5&#34;&gt;代码&lt;/h3&gt;
&lt;p&gt;除了上述对表达式的解析外，我们还需要初始化虚拟机的栈，我们可以正确调用 &lt;code&gt;main&lt;/code&gt; 函数，且当 &lt;code&gt;main&lt;/code&gt; 函数结束时退出进程。&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-c&#34; data-language=&#34;c&#34;&gt;&lt;code class=&#34;language-c&#34;&gt;int *tmp;
// setup stack
sp = (int *)((int)stack + poolsize);
*--sp = EXIT; // call exit if main returns
*--sp = PUSH; tmp = sp;
*--sp = argc;
*--sp = (int)argv;
*--sp = (int)tmp;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;当然，最后要注意的一点是：所有的变量定义必须放在语句之前。&lt;/p&gt;
&lt;p&gt;本章的代码可以在 &lt;a href=&#34;https://github.com/lotabout/write-a-C-interpreter/tree/step-6&#34;&gt;Github&lt;/a&gt; 上下载，也可以直接 clone&lt;/p&gt;
&lt;figure&gt;&lt;div class=&#34;code-area&#34;&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone -b step-6 https://github.com/lotabout/write-a-C-interpreter&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;通过 &lt;code&gt;gcc -o xc-tutor xc-tutor.c&lt;/code&gt; 进行编译。并执行 &lt;code&gt;./xc-tutor hello.c&lt;/code&gt; 查看结果。&lt;/p&gt;
&lt;p&gt;正如我们保证的那样，我们的代码是自举的，能自己编译自己，所以你可以执行 &lt;code&gt;./xc-tutor xc-tutor.c hello.c&lt;/code&gt;。可以看到和之前有同样的输出。&lt;/p&gt;
&lt;h3 id=&#34;小结-7&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;本章我们进行了最后的解析，解析表达式。本章有两个难点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何通过递归调用 &lt;code&gt;expression&lt;/code&gt; 来实现运算符的优先级。&lt;/li&gt;
&lt;li&gt;如何为每个运算符生成对应的汇编代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;尽管代码看起来比较简单（虽然多），但其中用到的原理还是需要仔细推敲的。&lt;/p&gt;
&lt;p&gt;最后，恭喜你！通过一步步的学习，自己实现了一个C语言的编译器（好吧，是解释器）。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;恭喜你完成了自己的 C 语言编译器，本章中我们发一发牢骚，说一说编写编译器值得注意的一些问题；编写编译器时遇到的一些难题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;虚拟机与目标代码&#34;&gt;虚拟机与目标代码&lt;/h3&gt;
&lt;p&gt;整个系列的一开始，我们就着手虚拟机的实现。不知道你是否有同感，这部分对于整个编译器的编写其实是十分重要的。我认为至少占了重要程度的50%。&lt;/p&gt;
&lt;p&gt;这里要说明这样一个观点，学习编译原理时常常着眼于词法分析和语法分析，而忽略了同样重要的代码生成。对于学习或考试而言或许可以，但实际编译项目时，最为重要的是能“跑起来”，所以我们需要给予代码生成高度的重视。&lt;/p&gt;
&lt;p&gt;同时我们也看到，在后期解析语句和表达式时，难点已经不再是语法分析了，而是如何为运算符生成相应的汇编代码。&lt;/p&gt;
&lt;h3 id=&#34;词法分析&#34;&gt;词法分析&lt;/h3&gt;
&lt;p&gt;我们用了很暴力的手段编写了我们的词法分析器，我认为这并无不可。&lt;/p&gt;
&lt;p&gt;但你依旧可以学习相关的知识，了解自动生成词法分析器的原理，它涉及到了“正则表达式”，“状态机”等等知识。相信这部分的知识能够很大程度上提高你的编程水平。&lt;/p&gt;
&lt;p&gt;同时，如果今后你仍然想编写编译器，不妨试试这些自动生成工具。&lt;/p&gt;
&lt;h3 id=&#34;语法分析&#34;&gt;语法分析&lt;/h3&gt;
&lt;p&gt;长期以来，语法分析对我而言一直是迷一样的存在，直到真正用递归下降的方式实现了一个。&lt;/p&gt;
&lt;p&gt;我们用了专门的一章讲解了“递归下降”与 BNF 文法的关系。希望能减少你对理论的厌恶。至少，实现起来并不是太难。&lt;/p&gt;
&lt;p&gt;如果有兴趣，可以学习学习这些文法，因为已经有许多自动生成的工具支持它们。这样你就不需要重复造轮子。可以看看 yacc 等工具，更先进的版本是 &lt;code&gt;bsion&lt;/code&gt;。同时其它语言也有许多类似的支持。&lt;/p&gt;
&lt;p&gt;题外话，最近知道了一个叫“PEG 文法”的表示方法，无论是读起来，还是实现起来，都比 BNF 要容易，你也可以学习看看。&lt;/p&gt;
&lt;h3 id=&#34;关于编代码&#34;&gt;关于编代码&lt;/h3&gt;
&lt;p&gt;这也是我自己的感慨吧。无论多好的教程，想要完全理解它，最好的方式恐怕还是要自己实现它。&lt;/p&gt;
&lt;p&gt;只是在编写代码的过程中，我们会遇到许多的挫折，例如需要考虑许多细节，或是调试起来十分困难。但也只有真正静下心来去克服它，我们才能有所成长吧。&lt;/p&gt;
&lt;p&gt;例如在编写表达式的解析时，大量重复的代码特别让人崩溃。还有就是调试编译器，简直痛苦地无话可说。&lt;/p&gt;
&lt;p&gt;P.S. 如果你按这个系列自己编写代码，记得事先写一些用于输出汇编代码的函数，很有帮助的。&lt;/p&gt;
&lt;p&gt;还有就是写这个系列的文章，开始的冲动过了之后，每写一篇都特别心烦，希望文章本身没有受我的这种情绪影响吧。&lt;/p&gt;
&lt;h3 id=&#34;结语&#34;&gt;结语&lt;/h3&gt;
&lt;p&gt;编程有趣又无趣，只有身在其中的我们才能体会吧。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Github &lt;a href=&#34;https://github.com/appotry/write-a-C-interpreter&#34;&gt;write-a-C-interpreter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;编辑整理 &lt;a href=&#34;https://lotabout.me/2015/write-a-C-interpreter-0/&#34;&gt;手把手教你构建 C 语言编译器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相关书籍&#34;&gt;相关书籍&lt;/h3&gt;
&lt;h4 id=&#34;30天自制操作系统&#34;&gt;30天自制操作系统&lt;/h4&gt;
&lt;div class=&#34;douban-card-block&#34;&gt;
    &lt;a class=&#34;douban-card&#34; href=&#34;https://book.douban.com/subject/11530329&#34;&gt;
        &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-bgimg&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s11138117.jpg&#39;);&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-left&#34;&gt;
            &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-img&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s11138117.jpg&#39;);&#34;&gt;
            &lt;/div&gt;
            &lt;div class=&#34;douban-card-status&#34;&gt;我最近在读这本书&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-right&#34; style=&#34;line-height: 1.7;&#34;&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;书名: &lt;/span&gt;&lt;strong&gt;30天自制操作系统&lt;/strong&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;作者: &lt;/span&gt;&lt;span&gt;[日]川合秀实&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;出版年份: &lt;/span&gt;&lt;span&gt;2012-8&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;评分: &lt;/span&gt;&lt;span&gt;8.3&lt;/span&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;h4 id=&#34;自制编译器&#34;&gt;自制编译器&lt;/h4&gt;
&lt;div class=&#34;douban-card-block&#34;&gt;
    &lt;a class=&#34;douban-card&#34; href=&#34;https://book.douban.com/subject/26806041&#34;&gt;
        &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-bgimg&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img9.doubanio.com/view/subject/s/public/s28768045.jpg&#39;);&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-left&#34;&gt;
            &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-img&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img9.doubanio.com/view/subject/s/public/s28768045.jpg&#39;);&#34;&gt;
            &lt;/div&gt;
            &lt;div class=&#34;douban-card-status&#34;&gt;见字如晤&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-right&#34; style=&#34;line-height: 1.7;&#34;&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;书名: &lt;/span&gt;&lt;strong&gt;自制编译器&lt;/strong&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;作者: &lt;/span&gt;&lt;span&gt;[日]青木峰郎&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;出版年份: &lt;/span&gt;&lt;span&gt;2016-6&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;评分: &lt;/span&gt;&lt;span&gt;7.9&lt;/span&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;h4 id=&#34;自制搜索引擎&#34;&gt;自制搜索引擎&lt;/h4&gt;
&lt;div class=&#34;douban-card-block&#34;&gt;
    &lt;a class=&#34;douban-card&#34; href=&#34;https://book.douban.com/subject/26681675&#34;&gt;
        &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-bgimg&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img2.doubanio.com/view/subject/s/public/s28357851.jpg&#39;);&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-left&#34;&gt;
            &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-img&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img2.doubanio.com/view/subject/s/public/s28357851.jpg&#39;);&#34;&gt;
            &lt;/div&gt;
            &lt;div class=&#34;douban-card-status&#34;&gt;见字如晤&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-right&#34; style=&#34;line-height: 1.7;&#34;&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;书名: &lt;/span&gt;&lt;strong&gt;自制搜索引擎&lt;/strong&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;作者: &lt;/span&gt;&lt;span&gt;[日]山田浩之&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;出版年份: &lt;/span&gt;&lt;span&gt;2016-1&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;评分: &lt;/span&gt;&lt;span&gt;7.6&lt;/span&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;h4 id=&#34;自己动手实现Lua&#34;&gt;自己动手实现Lua&lt;/h4&gt;
&lt;div class=&#34;douban-card-block&#34;&gt;
    &lt;a class=&#34;douban-card&#34; href=&#34;https://book.douban.com/subject/30348061&#34;&gt;
        &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-bgimg&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s29891318.jpg&#39;);&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-left&#34;&gt;
            &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-img&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s29891318.jpg&#39;);&#34;&gt;
            &lt;/div&gt;
            &lt;div class=&#34;douban-card-status&#34;&gt;见字如晤&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-right&#34; style=&#34;line-height: 1.7;&#34;&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;书名: &lt;/span&gt;&lt;strong&gt;自己动手实现Lua&lt;/strong&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;作者: &lt;/span&gt;&lt;span&gt;张秀宏&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;出版年份: &lt;/span&gt;&lt;span&gt;2018-1-1&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;评分: &lt;/span&gt;&lt;span&gt;9.1&lt;/span&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;h4 id=&#34;两周自制脚本语言&#34;&gt;两周自制脚本语言&lt;/h4&gt;
&lt;div class=&#34;douban-card-block&#34;&gt;
    &lt;a class=&#34;douban-card&#34; href=&#34;https://book.douban.com/subject/25908672&#34;&gt;
        &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-bgimg&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s27306068.jpg&#39;);&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-left&#34;&gt;
            &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-img&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s27306068.jpg&#39;);&#34;&gt;
            &lt;/div&gt;
            &lt;div class=&#34;douban-card-status&#34;&gt;见字如晤&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-right&#34; style=&#34;line-height: 1.7;&#34;&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;书名: &lt;/span&gt;&lt;strong&gt;两周自制脚本语言&lt;/strong&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;作者: &lt;/span&gt;&lt;span&gt;[日]千叶滋&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;出版年份: &lt;/span&gt;&lt;span&gt;2014-6&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;评分: &lt;/span&gt;&lt;span&gt;8.4&lt;/span&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;h4 id=&#34;自制编程语言&#34;&gt;自制编程语言&lt;/h4&gt;
&lt;div class=&#34;douban-card-block&#34;&gt;
    &lt;a class=&#34;douban-card&#34; href=&#34;https://book.douban.com/subject/25735333&#34;&gt;
        &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-bgimg&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img3.doubanio.com/view/subject/s/public/s27065250.jpg&#39;);&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-left&#34;&gt;
            &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-img&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img3.doubanio.com/view/subject/s/public/s27065250.jpg&#39;);&#34;&gt;
            &lt;/div&gt;
            &lt;div class=&#34;douban-card-status&#34;&gt;见字如晤&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-right&#34; style=&#34;line-height: 1.7;&#34;&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;书名: &lt;/span&gt;&lt;strong&gt;自制编程语言&lt;/strong&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;作者: &lt;/span&gt;&lt;span&gt;［日］前桥和弥&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;出版年份: &lt;/span&gt;&lt;span&gt;2013-11&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;评分: &lt;/span&gt;&lt;span&gt;8.1&lt;/span&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;h4 id=&#34;CPU自制入门&#34;&gt;CPU自制入门&lt;/h4&gt;
&lt;div class=&#34;douban-card-block&#34;&gt;
    &lt;a class=&#34;douban-card&#34; href=&#34;https://book.douban.com/subject/25780703&#34;&gt;
        &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-bgimg&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s27160217.jpg&#39;);&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-left&#34;&gt;
            &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-img&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s27160217.jpg&#39;);&#34;&gt;
            &lt;/div&gt;
            &lt;div class=&#34;douban-card-status&#34;&gt;见字如晤&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-right&#34; style=&#34;line-height: 1.7;&#34;&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;书名: &lt;/span&gt;&lt;strong&gt;CPU自制入门&lt;/strong&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;作者: &lt;/span&gt;&lt;span&gt;[日]水头一寿&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;出版年份: &lt;/span&gt;&lt;span&gt;2014-1&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;评分: &lt;/span&gt;&lt;span&gt;7.8&lt;/span&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;h4 id=&#34;Orange’S-一个操作系统的实现&#34;&gt;Orange’S:一个操作系统的实现&lt;/h4&gt;
&lt;div class=&#34;douban-card-block&#34;&gt;
    &lt;a class=&#34;douban-card&#34; href=&#34;https://book.douban.com/subject/3735649&#34;&gt;
        &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-bgimg&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img9.doubanio.com/view/subject/s/public/s3788445.jpg&#39;);&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-left&#34;&gt;
            &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-img&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img9.doubanio.com/view/subject/s/public/s3788445.jpg&#39;);&#34;&gt;
            &lt;/div&gt;
            &lt;div class=&#34;douban-card-status&#34;&gt;我最近在读这本书&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-right&#34; style=&#34;line-height: 1.7;&#34;&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;书名: &lt;/span&gt;&lt;strong&gt;Orange&#39;S:一个操作系统的实现&lt;/strong&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;作者: &lt;/span&gt;&lt;span&gt;于渊&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;出版年份: &lt;/span&gt;&lt;span&gt;2009-6&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;评分: &lt;/span&gt;&lt;span&gt;8.8&lt;/span&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;h4 id=&#34;Linux内核完全注释&#34;&gt;Linux内核完全注释&lt;/h4&gt;
&lt;div class=&#34;douban-card-block&#34;&gt;
    &lt;a class=&#34;douban-card&#34; href=&#34;https://book.douban.com/subject/1231236&#34;&gt;
        &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-bgimg&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s8955528.jpg&#39;);&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-left&#34;&gt;
            &lt;div bg-lazy=&#34;&#34; class=&#34;douban-card-img&#34; style=&#34;background-image: url(&#39;https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s8955528.jpg&#39;);&#34;&gt;
            &lt;/div&gt;
            &lt;div class=&#34;douban-card-status&#34;&gt;见字如晤&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;douban-card-right&#34; style=&#34;line-height: 1.7;&#34;&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;书名: &lt;/span&gt;&lt;strong&gt;Linux内核完全注释&lt;/strong&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;作者: &lt;/span&gt;&lt;span&gt;赵炯&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;出版年份: &lt;/span&gt;&lt;span&gt;2005-8&lt;/span&gt;&lt;/div&gt;
            &lt;div class=&#34;douban-card-item&#34;&gt;&lt;span&gt;评分: &lt;/span&gt;&lt;span&gt;8.5&lt;/span&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;h3 id=&#34;相关仓库&#34;&gt;相关仓库&lt;/h3&gt;

&lt;div class=&#34;github-card-container&#34; style=&#34;position: relative; min-height: 150px;&#34;&gt;
  &lt;div class=&#34;github-card&#34; data-user=&#34;appotry&#34; data-repo=&#34;write-a-C-interpreter&#34;&gt;&lt;/div&gt;
  &lt;noscript&gt;
    &lt;div class=&#34;github-card-error&#34;&gt;
      JavaScript is required to load GitHub Cards
    &lt;/div&gt;
  &lt;/noscript&gt;
&lt;/div&gt;
    

&lt;div class=&#34;github-card-container&#34; style=&#34;position: relative; min-height: 150px;&#34;&gt;
  &lt;div class=&#34;github-card&#34; data-user=&#34;appotry&#34; data-repo=&#34;flash-linux0.11-talk&#34;&gt;&lt;/div&gt;
  &lt;noscript&gt;
    &lt;div class=&#34;github-card-error&#34;&gt;
      JavaScript is required to load GitHub Cards
    &lt;/div&gt;
  &lt;/noscript&gt;
&lt;/div&gt;
    

&lt;div class=&#34;github-card-container&#34; style=&#34;position: relative; min-height: 150px;&#34;&gt;
  &lt;div class=&#34;github-card&#34; data-user=&#34;appotry&#34; data-repo=&#34;linux-0.11-lab&#34;&gt;&lt;/div&gt;
  &lt;noscript&gt;
    &lt;div class=&#34;github-card-error&#34;&gt;
      JavaScript is required to load GitHub Cards
    &lt;/div&gt;
  &lt;/noscript&gt;
&lt;/div&gt;
    

&lt;div class=&#34;github-card-container&#34; style=&#34;position: relative; min-height: 150px;&#34;&gt;
  &lt;div class=&#34;github-card&#34; data-user=&#34;appotry&#34; data-repo=&#34;linux-lab&#34;&gt;&lt;/div&gt;
  &lt;noscript&gt;
    &lt;div class=&#34;github-card-error&#34;&gt;
      JavaScript is required to load GitHub Cards
    &lt;/div&gt;
  &lt;/noscript&gt;
&lt;/div&gt;
    
&lt;h2 id=&#34;相关文章&#34;&gt;相关文章&lt;/h2&gt;

    &lt;div class=&#34;vkr-url-wrapper&#34;&gt;
        &lt;a href=&#34;/posts/ed364362/&#34;&gt;&lt;img class=&#34;avatar&#34; src=&#34;/medias_webp/cover/linux.webp&#34;&gt;&lt;/a&gt;
        &lt;div class=&#34;desc-wrapper&#34;&gt;
            &lt;a href=&#34;/posts/ed364362/&#34;&gt;如何编写Linux驱动&lt;/a&gt;
            &lt;hr&gt;
            &lt;div class=&#34;desc&#34;&gt;本文介绍了编写驱动必备基础知识，编写驱动的难点之处。并从按键驱动到Sensor驱动简单介绍示范了驱动编写过程。并给出了驱动学习方法和评价驱动能力的技术指标！&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    

    &lt;div class=&#34;vkr-url-wrapper&#34;&gt;
        &lt;a href=&#34;/posts/6b2ba137/&#34;&gt;&lt;img class=&#34;avatar&#34; src=&#34;/medias_webp/cover/3g4g.webp&#34;&gt;&lt;/a&gt;
        &lt;div class=&#34;desc-wrapper&#34;&gt;
            &lt;a href=&#34;/posts/6b2ba137/&#34;&gt;3G,4G,Wifi选型需求分析及技术简介&lt;/a&gt;
            &lt;hr&gt;
            &lt;div class=&#34;desc&#34;&gt;详细介绍了3G，4G，wifi技术类型，选型，移植，性能介绍全过程。写了好多年了，禁止转载，第一次公开发表。&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    

    &lt;div class=&#34;vkr-url-wrapper&#34;&gt;
        &lt;a href=&#34;/posts/13894dce/&#34;&gt;&lt;img class=&#34;avatar&#34; src=&#34;/medias_webp/cover/hisi.webp&#34;&gt;&lt;/a&gt;
        &lt;div class=&#34;desc-wrapper&#34;&gt;
            &lt;a href=&#34;/posts/13894dce/&#34;&gt;海思MPP&amp;amp;UNF构架源代码级分析&lt;/a&gt;
            &lt;hr&gt;
            &lt;div class=&#34;desc&#34;&gt;行业中分析海思MPP内核构架，源码分析，多年经验总结积累结果。写了好多年了，禁止转载，第一次公开发表。&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    

    &lt;div class=&#34;vkr-url-wrapper&#34;&gt;
        &lt;a href=&#34;/posts/ffcce55d/&#34;&gt;&lt;img class=&#34;avatar&#34; src=&#34;/medias_webp/cover/os.webp&#34;&gt;&lt;/a&gt;
        &lt;div class=&#34;desc-wrapper&#34;&gt;
            &lt;a href=&#34;/posts/ffcce55d/&#34;&gt;如何实现自己的操作系统&lt;/a&gt;
            &lt;hr&gt;
            &lt;div class=&#34;desc&#34;&gt;作为一个程序员，你肯定设想过创造属于自己的操作系统，这其中涉及非常多的知识。本文大概介绍了涉及的知识点，并给出了相关书籍和参考源代码仓库！&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    

    &lt;div class=&#34;vkr-url-wrapper&#34;&gt;
        &lt;a href=&#34;/posts/32570315/&#34;&gt;&lt;img class=&#34;avatar&#34; src=&#34;/medias_webp/cover/compiler.webp&#34;&gt;&lt;/a&gt;
        &lt;div class=&#34;desc-wrapper&#34;&gt;
            &lt;a href=&#34;/posts/32570315/&#34;&gt;手把手教你构建 C 语言编译器&lt;/a&gt;
            &lt;hr&gt;
            &lt;div class=&#34;desc&#34;&gt;“手把手教你构建 C 语言编译器” 这一系列教程将带你从头编写一个 C 语言的编译器。希望通过这个系列，我们能对编译器的构建有一定的了解，同时，我们也将构建出一个能用的 C 语言编译器，尽管有许多语法并不支持。&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    
&lt;h2 id=&#34;系列教程&#34;&gt;&lt;strong&gt;系列教程&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;/atom.xml&#34;&gt;&lt;i class=&#34;fas fa-rss&#34;&gt;&lt;/i&gt;全部文章RSS订阅&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;系统编程系列&#34;&gt;&lt;strong&gt;系统编程系列&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/posts/ffcce55d/&#34;&gt;如何实现自己的操作系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/32570315/&#34;&gt;手把手教你构建 C 语言编译器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/ed364362/&#34;&gt;如何编写Linux驱动？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/13894dce/&#34;&gt;海思MPP&amp;amp;UNF构架源代码级分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/90e60aac/&#34;&gt;使用 Shell 脚本实现一个简单 Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/codecrafters-io/build-your-own-x&#34;&gt;Github build-your-own-x 系列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

 ]]></description>
        </item>
    </channel>
</rss>
